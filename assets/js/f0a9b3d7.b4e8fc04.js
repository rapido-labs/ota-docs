"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[141],{3382:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"integration/basics","title":"Basic Integration Flow","description":"This guide provides a comprehensive, step-by-step breakdown of integrating your PWA with Rapido\'s Single Sign-On system. Each phase is explained in detail with code examples and best practices.","source":"@site/docs/integration/basics.md","sourceDirName":"integration","slug":"/integration/basics","permalink":"/ota-docs/docs/integration/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/integration/basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Basic Integration Flow","sidebar_label":"Integration Basics","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/ota-docs/docs/quickstart"},"next":{"title":"JavaScript Bridge","permalink":"/ota-docs/docs/integration/javascript-bridge"}}');var s=i(4848),o=i(8453);const a={title:"Basic Integration Flow",sidebar_label:"Integration Basics",sidebar_position:1},r="Basic Integration Flow",d={},c=[{value:"Integration Flow Overview",id:"integration-flow-overview",level:2},{value:"Phase 1: PWA Launch from Rapido",id:"phase-1-pwa-launch-from-rapido",level:2},{value:"URL Patterns",id:"url-patterns",level:3},{value:"First-time Access (No Session)",id:"first-time-access-no-session",level:4},{value:"Returning User (With Session)",id:"returning-user-with-session",level:4},{value:"Initial Setup Code",id:"initial-setup-code",level:3},{value:"Phase 2: Token Request via JavaScript Bridge",id:"phase-2-token-request-via-javascript-bridge",level:2},{value:"Bridge Method Usage",id:"bridge-method-usage",level:3},{value:"Client ID Configuration",id:"client-id-configuration",level:3},{value:"Phase 3: User Consent and Token Reception",id:"phase-3-user-consent-and-token-reception",level:2},{value:"Setting Up Callbacks",id:"setting-up-callbacks",level:3},{value:"Backend Token Validation",id:"backend-token-validation",level:3},{value:"Error Handling for Consent",id:"error-handling-for-consent",level:3},{value:"Phase 4: Backend Token Validation",id:"phase-4-backend-token-validation",level:2},{value:"Backend Implementation (Node.js Example)",id:"backend-implementation-nodejs-example",level:3},{value:"Phase 5: Session Storage and Management",id:"phase-5-session-storage-and-management",level:2},{value:"Frontend Session Management",id:"frontend-session-management",level:3},{value:"Complete Integration Example",id:"complete-integration-example",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"basic-integration-flow",children:"Basic Integration Flow"})}),"\n",(0,s.jsx)(e.p,{children:"This guide provides a comprehensive, step-by-step breakdown of integrating your PWA with Rapido's Single Sign-On system. Each phase is explained in detail with code examples and best practices."}),"\n",(0,s.jsx)(e.h2,{id:"integration-flow-overview",children:"Integration Flow Overview"}),"\n",(0,s.jsx)(e.p,{children:"The integration consists of 5 main phases:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"PWA Launch"})," - User navigates to your PWA from Rapido"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Token Request"})," - PWA requests authentication token via JS Bridge"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User Consent"})," - Rapido shows consent screen and handles user approval"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Backend Validation"})," - Your backend validates the token with Rapido's API"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Session Management"})," - PWA stores and manages session for future visits"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"phase-1-pwa-launch-from-rapido",children:"Phase 1: PWA Launch from Rapido"}),"\n",(0,s.jsx)(e.p,{children:"When a user accesses your PWA through Rapido, the app launches your PWA with a specific URL format."}),"\n",(0,s.jsx)(e.h3,{id:"url-patterns",children:"URL Patterns"}),"\n",(0,s.jsx)(e.h4,{id:"first-time-access-no-session",children:"First-time Access (No Session)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"https://your-pwa.com/app\n"})}),"\n",(0,s.jsx)(e.h4,{id:"returning-user-with-session",children:"Returning User (With Session)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"https://your-pwa.com/app?sessionId=abc123xyz789\n"})}),"\n",(0,s.jsx)(e.h3,{id:"initial-setup-code",children:"Initial Setup Code"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// PWA initialization script\n(function() {\n    'use strict';\n    \n    let rapidoIntegration = {\n        sessionId: null,\n        isAuthenticated: false,\n        \n        init: function() {\n            this.parseUrlParameters();\n            this.checkAuthenticationStatus();\n        },\n        \n        parseUrlParameters: function() {\n            const urlParams = new URLSearchParams(window.location.search);\n            this.sessionId = urlParams.get('sessionId');\n            \n            console.log('Session ID from URL:', this.sessionId);\n        },\n        \n        checkAuthenticationStatus: function() {\n            if (this.sessionId) {\n                // Validate existing session\n                this.validateExistingSession(this.sessionId);\n            } else {\n                // Check for stored session\n                this.checkStoredSession();\n            }\n        },\n        \n        checkStoredSession: function() {\n            try {\n                if (window.NativeJSBridge && typeof window.NativeJSBridge.fetchSessionId === 'function') {\n                    const storedSessionId = window.NativeJSBridge.fetchSessionId();\n                    \n                    if (storedSessionId && storedSessionId !== 'null') {\n                        console.log('Found stored session:', storedSessionId);\n                        this.validateExistingSession(storedSessionId);\n                        return;\n                    }\n                }\n            } catch (error) {\n                console.log('No stored session available:', error);\n            }\n            \n            // No session found - initiate authentication\n            this.requestAuthentication();\n        }\n    };\n    \n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', function() {\n            rapidoIntegration.init();\n        });\n    } else {\n        rapidoIntegration.init();\n    }\n    \n    // Make available globally for Rapido callbacks\n    window.rapidoIntegration = rapidoIntegration;\n})();\n"})}),"\n",(0,s.jsx)(e.h2,{id:"phase-2-token-request-via-javascript-bridge",children:"Phase 2: Token Request via JavaScript Bridge"}),"\n",(0,s.jsx)(e.p,{children:"When no valid session exists, your PWA requests a token from Rapido using the JavaScript Bridge."}),"\n",(0,s.jsx)(e.h3,{id:"bridge-method-usage",children:"Bridge Method Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"requestAuthentication: function() {\n    console.log('Initiating Rapido authentication...');\n    \n    // Show loading state to user\n    this.showLoadingState('Connecting to Rapido...');\n    \n    try {\n        if (window.NativeJSBridge && typeof window.NativeJSBridge.requestUserToken === 'function') {\n            // Request token from Rapido\n            // Replace with your actual client ID from Rapido partner portal\n            window.NativeJSBridge.requestUserToken('your-partner-client-id');\n        } else {\n            throw new Error('Rapido NativeJSBridge interface not available');\n        }\n    } catch (error) {\n        console.error('Failed to request token:', error);\n        this.handleAuthenticationError('Unable to connect to Rapido. Please try again.');\n    }\n},\n\nshowLoadingState: function(message) {\n    // Show loading UI to user\n    const loadingElement = document.getElementById('loading-message');\n    if (loadingElement) {\n        loadingElement.textContent = message;\n        loadingElement.style.display = 'block';\n    }\n},\n\nhideLoadingState: function() {\n    const loadingElement = document.getElementById('loading-message');\n    if (loadingElement) {\n        loadingElement.style.display = 'none';\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"client-id-configuration",children:"Client ID Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Your client ID is provided by Rapido's team. Store it securely:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Configuration object\nconst RAPIDO_CONFIG = {\n    CLIENT_ID: 'your-partner-client-id', // Provided by Rapido\n    API_BASE_URL: 'https://your-api.com',\n    DEBUG_MODE: false // Set to false in production\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"phase-3-user-consent-and-token-reception",children:"Phase 3: User Consent and Token Reception"}),"\n",(0,s.jsxs)(e.p,{children:["After requesting a token, Rapido shows a consent screen to the user. Upon approval, Rapido calls your ",(0,s.jsx)(e.code,{children:"onTokenReceived"})," function."]}),"\n",(0,s.jsx)(e.h3,{id:"setting-up-callbacks",children:"Setting Up Callbacks"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"setupCallbacks: function() {\n    // CRITICAL: These functions must be globally accessible\n    window.onTokenReceived = this.handleTokenReceived.bind(this);\n    window.onUserSkippedLogin = this.handleUserSkippedLogin.bind(this);\n    window.onError = this.handleError.bind(this);\n},\n\nhandleTokenReceived: function(token) {\n    if (!token) {\n        this.handleAuthenticationError('No token received from Rapido');\n        return;\n    }\n    \n    console.log('Processing received token...');\n    this.hideLoadingState();\n    this.showLoadingState('Validating credentials...');\n    \n    // Send token to backend for validation\n    this.validateTokenWithBackend(token);\n},\n\nhandleUserSkippedLogin: function() {\n    console.log('User skipped login');\n    this.hideLoadingState();\n    this.showLoginForm();\n},\n\nhandleError: function(error) {\n    console.error('JSBridge Error:', error);\n    this.hideLoadingState();\n    this.showErrorMessage('Authentication failed. Please try again.');\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"backend-token-validation",children:"Backend Token Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"validateTokenWithBackend: function(token) {\n    fetch(`${RAPIDO_CONFIG.API_BASE_URL}/api/auth/rapido-login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify({ \n            token: token,\n            clientId: RAPIDO_CONFIG.CLIENT_ID\n        })\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        this.handleBackendResponse(data);\n    })\n    .catch(error => {\n        console.error('Backend validation failed:', error);\n        this.handleAuthenticationError('Authentication failed. Please try again.');\n    });\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"error-handling-for-consent",children:"Error Handling for Consent"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Handle case where user denies consent\nhandleAuthenticationError: function(message) {\n    this.hideLoadingState();\n    \n    // Show user-friendly error message\n    const errorElement = document.getElementById('error-message');\n    if (errorElement) {\n        errorElement.textContent = message;\n        errorElement.style.display = 'block';\n    }\n    \n    // Optionally provide retry mechanism\n    this.showRetryOption();\n},\n\nshowRetryOption: function() {\n    const retryButton = document.getElementById('retry-auth');\n    if (retryButton) {\n        retryButton.style.display = 'block';\n        retryButton.onclick = () => {\n            this.requestAuthentication();\n        };\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"phase-4-backend-token-validation",children:"Phase 4: Backend Token Validation"}),"\n",(0,s.jsx)(e.p,{children:"Your backend server validates the token with Rapido's API and returns user information."}),"\n",(0,s.jsx)(e.h3,{id:"backend-implementation-nodejs-example",children:"Backend Implementation (Node.js Example)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const express = require('express');\nconst axios = require('axios');\nconst crypto = require('crypto');\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Rapido API configuration\nconst RAPIDO_API = {\n    BASE_URL: 'https://partner-api.rapido.bike',\n    PARTNER_ID: process.env.RAPIDO_PARTNER_ID, // Store securely\n    PARTNER_KEY: process.env.RAPIDO_PARTNER_API_KEY, // Store securely\n    TIMEOUT: 10000 // 10 seconds\n};\n\n// Token validation endpoint\napp.post('/api/auth/rapido-login', async (req, res) => {\n    try {\n        const { token } = req.body;\n        \n        // Validate request\n        if (!token) {\n            return res.status(400).json({\n                success: false,\n                error: 'Token is required'\n            });\n        }\n        \n        console.log('Validating token with Rapido API...');\n        \n        // Call Rapido API\n        const rapidoResponse = await axios.post(\n            `${RAPIDO_API.BASE_URL}/partner/fetch-user-details`,\n            {\n                token: token\n            },\n            {\n                headers: {\n                    'Authorization': `Bearer ${RAPIDO_API.PARTNER_KEY}`,\n                    'x-client-id': `${PARTNER_ID}`,\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'YourApp-Partner/1.0'\n                },\n                timeout: RAPIDO_API.TIMEOUT\n            }\n        );\n        \n        if (rapidoResponse.data) {\n            const userData = rapidoResponse.data.user;\n            \n            // Process user data\n            const processedUser = await processUserAuthentication(userData);\n            \n            // Generate session\n            const sessionData = await createUserSession(processedUser);\n            \n            res.json({\n                success: true,\n                sessionId: sessionData.sessionId,\n                user: {\n                    id: processedUser.id,\n                    name: processedUser.name,\n                    mobile: processedUser.mobile \n                },\n                expiresAt: sessionData.expiresAt\n            });\n            \n        } else {\n            console.log('Token validation failed:', rapidoResponse.data);\n            res.status(401).json({\n                success: false,\n                error: 'Invalid token'\n            });\n        }\n        \n    } catch (error) {\n        console.error('Token validation error:', error);\n        \n        if (error.response) {\n            // Rapido API returned an error\n            const status = error.response.status;\n            const message = error.response.data?.message || 'Authentication failed';\n            \n            res.status(status).json({\n                success: false,\n                error: message\n            });\n        } else {\n            // Network or other error\n            res.status(500).json({\n                success: false,\n                error: 'Authentication service unavailable'\n            });\n        }\n    }\n});\n\n// Helper functions\nasync function processUserAuthentication(userData) {\n    // Create or update user in your database\n    const user = {\n        name: userData.name,\n        mobile: userData.mobile,\n        lastLoginAt: new Date()\n    };\n    \n    // Your database logic here\n    const savedUser = await saveOrUpdateUser(user);\n    \n    return savedUser;\n}\n\nasync function createUserSession(user) {\n    //\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"phase-5-session-storage-and-management",children:"Phase 5: Session Storage and Management"}),"\n",(0,s.jsx)(e.p,{children:"After successful authentication, store the session ID using Rapido's secure storage."}),"\n",(0,s.jsx)(e.h3,{id:"frontend-session-management",children:"Frontend Session Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"handleBackendResponse: function(data) {\n    this.hideLoadingState();\n    \n    if (data.success && data.sessionId) {\n        console.log('Authentication successful');\n        \n        // Store session ID securely using Rapido's storage\n        this.storeSessionId(data.sessionId);\n        \n        // Update UI state\n        this.isAuthenticated = true;\n        this.sessionId = data.sessionId;\n        \n        // Redirect to authenticated view\n        this.redirectToAuthenticatedView(data.user);\n        \n    } else {\n        console.error('Backend authentication failed:', data.error);\n        this.handleAuthenticationError(data.error || 'Authentication failed');\n    }\n},\n\nstoreSessionId: function(sessionId) {\n    try {\n        if (window.NativeJSBridge && typeof window.NativeJSBridge.storeSessionId === 'function') {\n            const result = window.NativeJSBridge.storeSessionId(sessionId);\n            if (result === 'SUCCESS') {\n                console.log('Session ID stored successfully');\n            } else {\n                console.warn('Failed to store session ID:', result);\n            }\n        } else {\n            console.warn('Rapido storage not available - session will not persist');\n        }\n    } catch (error) {\n        console.error('Failed to store session ID:', error);\n    }\n},\n\nredirectToAuthenticatedView: function(userData) {\n    // Store user data in application state\n    this.setUserData(userData);\n    \n    // Remove URL parameters\n    const url = new URL(window.location);\n    url.searchParams.delete('sessionId');\n    window.history.replaceState({}, document.title, url.pathname);\n    \n    // Navigate to main application\n    window.location.href = '/dashboard';\n},\n\nvalidateExistingSession: function(sessionId) {\n    // validate session as required\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"complete-integration-example",children:"Complete Integration Example"}),"\n",(0,s.jsx)(e.p,{children:"Here's a complete, production-ready implementation:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Your PWA - Rapido Integration</title>\n</head>\n<body>\n    <div id="loading-container" style="display: none;">\n        <div id="loading-message">Initializing...</div>\n    </div>\n    \n    <div id="error-container" style="display: none;">\n        <div id="error-message"></div>\n        <button id="retry-auth" style="display: none;">Retry Authentication</button>\n    </div>\n    \n    <div id="app-container" style="display: none;">\n        \x3c!-- Your authenticated app content --\x3e\n    </div>\n    \n    <script>\n        // Configuration\n        const RAPIDO_CONFIG = {\n            CLIENT_ID: \'your-partner-client-id\',\n            API_BASE_URL: \'https://your-api.com\',\n            DEBUG_MODE: false\n        };\n        \n        // Global callback for Rapido\n        function onTokenReceived(token) {\n            if (window.rapidoIntegration) {\n                window.rapidoIntegration.handleTokenReceived(token);\n            }\n        }\n        \n        // Main integration object\n        const rapidoIntegration = {\n            // ... (include all the methods shown above)\n        };\n        \n        // Bridge readiness check\n        function checkBridgeReady() {\n            const maxWaitTime = 5000;\n            const startTime = window.bridgeCheckStartTime || (window.bridgeCheckStartTime = Date.now());\n            \n            if (window.NativeJSBridge && typeof window.NativeJSBridge.requestUserToken === \'function\') {\n                console.log(\'\u2705 Bridge ready in \' + (Date.now() - startTime) + \'ms\');\n                rapidoIntegration.setupCallbacks();\n                rapidoIntegration.init();\n            } else if (Date.now() - startTime < maxWaitTime) {\n                setTimeout(checkBridgeReady, 10);\n            } else {\n                console.error(\'\u274c Bridge failed to initialize within 5 seconds\');\n                rapidoIntegration.handleAuthenticationError(\'Bridge connection failed\');\n            }\n        }\n        \n        // Initialize\n        window.onload = function() {\n            checkBridgeReady();\n        };\n        \n        // Make globally available\n        window.rapidoIntegration = rapidoIntegration;\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Next Steps"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Learn about ",(0,s.jsx)(e.a,{href:"/ota-docs/docs/integration/javascript-bridge",children:"JavaScript Bridge methods"})," in detail"]}),"\n",(0,s.jsxs)(e.li,{children:["Review ",(0,s.jsx)(e.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})," for production deployment"]}),"\n",(0,s.jsxs)(e.li,{children:["Check ",(0,s.jsx)(e.a,{href:"/ota-docs/docs/api/overview",children:"API Reference"})," for backend integration specifications"]}),"\n",(0,s.jsxs)(e.li,{children:["Check ",(0,s.jsx)(e.a,{href:"/ota-docs/docs/quickstart",children:"Quick Start Guide"})," for step-by-step instructions"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>r});var t=i(6540);const s={},o=t.createContext(s);function a(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);