"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[322],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}},9802:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"integration/javascript-bridge","title":"Using the Rapido JS Bridge","description":"The Rapido JavaScript Bridge provides secure communication between your PWA and the Rapido mobile application. This page documents all available methods, event handlers, and best practices for implementation.","source":"@site/docs/integration/javascript-bridge.md","sourceDirName":"integration","slug":"/integration/javascript-bridge","permalink":"/ota-docs/docs/integration/javascript-bridge","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/integration/javascript-bridge.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Using the Rapido JS Bridge","sidebar_label":"JavaScript Bridge","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Integration Basics","permalink":"/ota-docs/docs/integration/basics"},"next":{"title":"Events Tracking","permalink":"/ota-docs/docs/integration/events-tracking"}}');var r=i(4848),o=i(8453);const t={title:"Using the Rapido JS Bridge",sidebar_label:"JavaScript Bridge",sidebar_position:2},a="Using the Rapido JavaScript Bridge",d={},l=[{value:"Bridge Overview",id:"bridge-overview",level:2},{value:"Available Methods",id:"available-methods",level:2},{value:"requestUserToken(metadata)",id:"requestusertokenmetadata",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"updateLoginStatus(isSuccess, errorMessage)",id:"updateloginstatusissuccess-errormessage",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"Best Practices",id:"best-practices",level:4},{value:"storeSessionId(sessionId)",id:"storesessionidsessionid",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage-2",level:4},{value:"Best Practices",id:"best-practices-1",level:4},{value:"requestSessionId()",id:"requestsessionid",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Usage",id:"usage-3",level:4},{value:"Behavior",id:"behavior-1",level:4},{value:"Error Handling",id:"error-handling-1",level:4},{value:"Advanced Usage with Validation",id:"advanced-usage-with-validation",level:4},{value:"logEvents(eventType, propertiesJson)",id:"logeventseventtype-propertiesjson",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Usage",id:"usage-4",level:4},{value:"Behavior",id:"behavior-2",level:4},{value:"Error Handling",id:"error-handling-2",level:4},{value:"Best Practices",id:"best-practices-2",level:4},{value:"Event Handlers",id:"event-handlers",level:2},{value:"onTokenReceived(token)",id:"ontokenreceivedtoken",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Implementation",id:"implementation",level:4},{value:"onUserSkippedLogin()",id:"onuserskippedlogin",level:3},{value:"Implementation",id:"implementation-1",level:4},{value:"onSessionIdReceived(sessionId)",id:"onsessionidreceivedsessionid",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Implementation",id:"implementation-2",level:4},{value:"Advanced Implementation",id:"advanced-implementation",level:4},{value:"onError(error)",id:"onerrorerror",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Implementation",id:"implementation-3",level:4},{value:"Bridge Readiness Check",id:"bridge-readiness-check",level:2},{value:"Why Bridge Readiness Check is Required",id:"why-bridge-readiness-check-is-required",level:3},{value:"Implementation",id:"implementation-4",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Testing and Debugging",id:"testing-and-debugging",level:2},{value:"Debug Helper Functions",id:"debug-helper-functions",level:3},{value:"Testing Checklist",id:"testing-checklist",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"using-the-rapido-javascript-bridge",children:"Using the Rapido JavaScript Bridge"})}),"\n",(0,r.jsx)(n.p,{children:"The Rapido JavaScript Bridge provides secure communication between your PWA and the Rapido mobile application. This page documents all available methods, event handlers, and best practices for implementation."}),"\n",(0,r.jsx)(n.h2,{id:"bridge-overview",children:"Bridge Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The JavaScript Bridge is exposed through the ",(0,r.jsx)(n.code,{children:"window.NativeJSBridge"})," object when your PWA runs inside the Rapido app. It provides five core functionalities:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication Token"})," - Request user authentication tokens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Login Status"})," - Notify app about authentication results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Storage"})," - Securely store and retrieve session IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Logging"})," - Track real-time user interactions and analytics events (PWA to Native)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Handling"})," - Receive callbacks from Rapido"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,r.jsx)(n.h3,{id:"requestusertokenmetadata",children:"requestUserToken(metadata)"}),"\n",(0,r.jsx)(n.p,{children:"Initiates the user authentication flow by requesting a token from Rapido."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (object, required): Authentication metadata specifying the required scope. Use ",(0,r.jsx)(n.code,{children:'{ scope: ["profile"] }'})," to request user profile access."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function initiateLogin() {\n    if (window.NativeJSBridge && window.NativeJSBridge.requestUserToken) {\n        window.NativeJSBridge.requestUserToken({ scope: [\"profile\"] });\n    } else {\n        console.error('Rapido NativeJSBridge not available');\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Triggers Rapido's consent screen"}),"\n",(0,r.jsx)(n.li,{children:"User approves or denies access"}),"\n",(0,r.jsxs)(n.li,{children:["On approval, calls your ",(0,r.jsx)(n.code,{children:"onTokenReceived"})," function"]}),"\n",(0,r.jsxs)(n.li,{children:["On denial, calls your ",(0,r.jsx)(n.code,{children:"onUserSkippedLogin"})," function"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function safeRequestToken() {\n    try {\n        if (!window.NativeJSBridge) {\n            throw new Error('Running outside Rapido app');\n        }\n        \n        if (typeof window.NativeJSBridge.requestUserToken !== 'function') {\n            throw new Error('requestUserToken method not available');\n        }\n        \n        window.NativeJSBridge.requestUserToken({ scope: [\"profile\"] });\n        \n    } catch (error) {\n        console.error('Failed to request token:', error);\n        // Handle gracefully - maybe show manual login option\n        showManualLoginOption();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"updateloginstatusissuccess-errormessage",children:"updateLoginStatus(isSuccess, errorMessage)"}),"\n",(0,r.jsxs)(n.p,{children:["Notifies the native app about the login result after receiving a token. This should be called by the PWA after processing the ",(0,r.jsx)(n.code,{children:"onTokenReceived"})," callback."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isSuccess"})," (boolean, required): ",(0,r.jsx)(n.code,{children:"true"})," if authentication was successful, ",(0,r.jsx)(n.code,{children:"false"})," if failed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"errorMessage"})," (string, optional): Error message if ",(0,r.jsx)(n.code,{children:"isSuccess"})," is ",(0,r.jsx)(n.code,{children:"false"}),", otherwise pass ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Call this in your onTokenReceived callback\nfunction onTokenReceived(token) {\n    console.log('Token received from Rapido');\n    // Process the token (validate, create session, etc.)\n    processToken(token)\n        .then((sessionData) => {\n            // IMPORTANT: Store session/cookie first\n            storeUserSession(sessionData);\n\n            // Then notify app that login was successful\n            if (window.NativeJSBridge && window.NativeJSBridge.updateLoginStatus) {\n                window.NativeJSBridge.updateLoginStatus(true, null);\n            }\n\n            // Show dashboard or redirect user\n            showDashboard();\n        })\n        .catch((error) => {\n            // Notify app that login failed\n            if (window.NativeJSBridge && window.NativeJSBridge.updateLoginStatus) {\n                window.NativeJSBridge.updateLoginStatus(false, error.message);\n            }\n\n            // Handle error appropriately\n            showErrorMessage(error.message);\n        });\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important Note"}),": In success case, the ",(0,r.jsx)(n.code,{children:"updateLoginStatus"})," function should be called ",(0,r.jsx)(n.strong,{children:"after"})," storing the session/cookie. Once the popup is closed, user should ideally be in logged-in state."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Always call updateLoginStatus after processing onTokenReceived\nwindow.JSBridge.onTokenReceived = function(token) {\n    try {\n        // Your authentication logic here\n        const sessionData = processAuthToken(token);\n\n        if (sessionData) {\n            // Store session/cookie data first\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n\n            // Then notify success - user is now in logged-in state\n            window.NativeJSBridge.updateLoginStatus(true, null);\n            redirectToUserDashboard();\n        } else {\n            // Notify failure with reason\n            window.NativeJSBridge.updateLoginStatus(false, 'Token processing failed');\n            showRetryOption();\n        }\n    } catch (error) {\n        // Always notify failure on exceptions\n        window.NativeJSBridge.updateLoginStatus(false, error.message);\n        handleAuthenticationError(error);\n    }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"storesessionidsessionid",children:"storeSessionId(sessionId)"}),"\n",(0,r.jsx)(n.p,{children:"Securely stores a session ID in Rapido's encrypted storage."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sessionId"})," (string, required): The session ID to store"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"string"}),': "SUCCESS" on success, "ERROR',":message",'" on failure']}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function saveSession(sessionId) {\n    if (window.NativeJSBridge && window.NativeJSBridge.storeSessionId) {\n        try {\n            const result = window.NativeJSBridge.storeSessionId(sessionId);\n            if (result === 'SUCCESS') {\n                console.log('Session stored successfully');\n            } else {\n                console.error('Failed to store session:', result);\n            }\n        } catch (error) {\n            console.error('Failed to store session:', error);\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function secureStoreSession(sessionId) {\n    // Validate session ID format\n    if (!sessionId || typeof sessionId !== 'string' || sessionId.length < 10) {\n        throw new Error('Invalid session ID format');\n    }\n    \n    // Store with error handling\n    try {\n        if (window.NativeJSBridge && window.NativeJSBridge.storeSessionId) {\n            window.NativeJSBridge.storeSessionId(sessionId);\n            return true;\n        } else {\n            console.warn('Session storage not available - user will need to re-authenticate');\n            return false;\n        }\n    } catch (error) {\n        console.error('Session storage failed:', error);\n        throw error;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"requestsessionid",children:"requestSessionId()"}),"\n",(0,r.jsx)(n.p,{children:"Requests the stored session ID from Rapido's secure storage using a callback pattern for iOS compatibility."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"None (uses callback pattern)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function requestStoredSession() {\n    if (window.NativeJSBridge && window.NativeJSBridge.requestSessionId) {\n        // IMPORTANT: Set up callback before calling requestSessionId\n        window.JSBridge.onSessionIdReceived = function(sessionId) {\n            if (sessionId && sessionId !== 'null') {\n                console.log('Session found:', sessionId);\n                // Process stored session\n            } else {\n                console.log('No session found');\n                // Handle no session case\n            }\n        };\n        \n        window.NativeJSBridge.requestSessionId();\n    } else {\n        console.error('Rapido NativeJSBridge not available');\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"behavior-1",children:"Behavior"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Accesses Rapido's secure storage"}),"\n",(0,r.jsx)(n.li,{children:"Retrieves encrypted session ID if it exists"}),"\n",(0,r.jsxs)(n.li,{children:["Calls your ",(0,r.jsx)(n.code,{children:"onSessionIdReceived"})," function with the result"]}),"\n",(0,r.jsxs)(n.li,{children:["Returns ",(0,r.jsx)(n.code,{children:"null"})," if no session exists"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function safeRequestSession() {\n    try {\n        if (!window.NativeJSBridge) {\n            throw new Error('Running outside Rapido app');\n        }\n        \n        if (typeof window.NativeJSBridge.requestSessionId !== 'function') {\n            throw new Error('requestSessionId method not available');\n        }\n        \n        // IMPORTANT: Set up callback before calling requestSessionId\n        window.JSBridge.onSessionIdReceived = function(sessionId) {\n            if (sessionId && sessionId !== 'null') {\n                console.log('Session found:', sessionId);\n                // Handle existing session (validate with backend)\n            } else {\n                console.log('No session found');\n                // Show login screen\n                showLoginScreen();\n            }\n        };\n        \n        window.NativeJSBridge.requestSessionId();\n        \n    } catch (error) {\n        console.error('Failed to request session:', error);\n        // Handle gracefully - maybe show login option\n        showLoginScreen();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"advanced-usage-with-validation",children:"Advanced Usage with Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function validateAndGetSession() {\n    // Set up callback for session validation\n    window.JSBridge.onSessionIdReceived = async function(sessionId) {\n        if (!sessionId || sessionId === 'null') {\n            console.log('No stored session found');\n            // Show login screen or request new authentication\n            return;\n        }\n        \n        // Validate session with your backend API\n        // NOTE: See API Examples documentation for complete backend implementation\n        try {\n            // Call your session validation endpoint\n            const isValid = await validateSessionWithYourBackend(sessionId);\n            \n            if (isValid) {\n                // Proceed with authenticated flow (show dashboard, etc.)\n                console.log('Session is valid - proceeding to app');\n            } else {\n                console.log('Stored session is invalid');\n                // Clear invalid session and show login\n                clearStoredSession();\n            }\n        } catch (error) {\n            console.error('Session validation failed:', error);\n            // Handle validation error (show login or retry)\n        }\n    };\n    \n    // Trigger session request\n    if (window.NativeJSBridge && window.NativeJSBridge.requestSessionId) {\n        window.NativeJSBridge.requestSessionId();\n    }\n}\n\nfunction clearStoredSession() {\n    // Clear by storing empty string\n    if (window.NativeJSBridge && window.NativeJSBridge.storeSessionId) {\n        window.NativeJSBridge.storeSessionId('');\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"logeventseventtype-propertiesjson",children:"logEvents(eventType, propertiesJson)"}),"\n",(0,r.jsx)(n.p,{children:"Logs real-time user interaction events from your PWA to the Rapido mobile app for analytics and tracking purposes."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This method handles ",(0,r.jsx)(n.strong,{children:"PWA-to-Native"})," events for user interactions and analytics. For business events (orders, bookings, payments), use the ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/integration/events-tracking#server-to-server-events",children:"Server-to-Server Events API"})," from your backend."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eventType"})," (string, required): The type/name of the event to log (e.g., 'user_action', 'page_view', 'custom_event')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"propertiesJson"})," (string, optional): A JSON string containing event properties as key-value pairs"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function trackUserAction(actionName) {\n    const properties = {\n        action_name: actionName,\n        timestamp: new Date().toISOString(),\n        page_url: window.location.href,\n        user_agent: navigator.userAgent\n         // add additional properties\n    };\n    \n    if (window.NativeJSBridge && window.NativeJSBridge.logEvents) {\n        window.NativeJSBridge.logEvents('<EventType>', JSON.stringify(properties));\n    }\n}\n\nfunction trackPageView() {\n    const properties = {\n        page_name: document.title,\n        referrer: document.referrer,\n        timestamp: new Date().toISOString(),\n        // add additional properties\n    };\n    \n    window.NativeJSBridge.logEvents('<EventType>', JSON.stringify(properties));\n}\n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"behavior-2",children:"Behavior"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Accepts the event type as a string and properties as a JSON string"}),"\n",(0,r.jsx)(n.li,{children:"Validates the parameters on the native side"}),"\n",(0,r.jsx)(n.li,{children:"Parses the properties JSON into a HashMap"}),"\n",(0,r.jsx)(n.li,{children:"Logs the event with structured data"}),"\n",(0,r.jsxs)(n.li,{children:["Calls your ",(0,r.jsx)(n.code,{children:"onEventLogged"})," callback with success/failure status"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-2",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function safeLogEvent(eventType, properties) {\n    try {\n        if (!window.NativeJSBridge) {\n            throw new Error('Running outside Rapido app');\n        }\n        \n        if (typeof window.NativeJSBridge.logEvents !== 'function') {\n            throw new Error('logEvents method not available');\n        }\n        \n        if (!eventType || typeof eventType !== 'string') {\n            throw new Error('eventType must be a non-empty string');\n        }\n        \n        const propertiesJson = JSON.stringify(properties || {});\n        window.NativeJSBridge.logEvents(eventType, propertiesJson);\n        \n    } catch (error) {\n        console.error('Failed to log event:', error);\n        // Handle gracefully - maybe store for later or use fallback analytics\n        storeEventForLater(eventType, properties);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"best-practices-2",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use consistent naming conventions for event types (e.g., snake_case)"}),"\n",(0,r.jsx)(n.li,{children:"Keep property keys as strings"}),"\n",(0,r.jsx)(n.li,{children:"Always JSON.stringify() the properties object before passing to logEvents"}),"\n",(0,r.jsx)(n.li,{children:"Avoid deeply nested objects in properties for better performance"}),"\n",(0,r.jsx)(n.li,{children:"Include timestamp information when relevant"}),"\n",(0,r.jsx)(n.li,{children:"Limit the size of properties object to avoid large JSON strings"}),"\n",(0,r.jsx)(n.li,{children:"Handle JSON.stringify() errors if properties contain circular references"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,r.jsx)(n.h3,{id:"ontokenreceivedtoken",children:"onTokenReceived(token)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CRITICAL"}),": This function must be set on ",(0,r.jsx)(n.code,{children:"window.JSBridge.onTokenReceived"})," and will be called by Rapido when a user token is available."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (string): Encrypted authentication token from Rapido"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Set the callback function directly on JSBridge\nwindow.JSBridge.onTokenReceived = function(token) {\n    console.log('Token received from Rapido');\n    \n    // Validate token parameter\n    if (!token || typeof token !== 'string') {\n        console.error('Invalid token received');\n        handleAuthError('Invalid token received');\n        return;\n    }\n    \n    // Process token with your backend\n    processReceivedToken(token);\n};\n\nasync function processReceivedToken(token) {\n    try {\n        // Show processing state\n        showLoadingState('Validating credentials...');\n        \n        // Send to backend for validation\n        const response = await fetch('/api/auth/rapido-login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ token })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const data = await response.json();\n        \n        if (data.success) {\n            // Store session and redirect\n            await handleSuccessfulAuth(data);\n        } else {\n            throw new Error(data.error || 'Authentication failed');\n        }\n        \n    } catch (error) {\n        console.error('Token processing failed:', error);\n        handleAuthError(error.message);\n    } finally {\n        hideLoadingState();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"onuserskippedlogin",children:"onUserSkippedLogin()"}),"\n",(0,r.jsx)(n.p,{children:"Called when user declines authentication."}),"\n",(0,r.jsx)(n.h4,{id:"implementation-1",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function onUserSkippedLogin() {\n    console.log('User skipped login');\n    hideLoadingState();\n    showLoginForm();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"onsessionidreceivedsessionid",children:"onSessionIdReceived(sessionId)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CRITICAL"}),": This function must be set on ",(0,r.jsx)(n.code,{children:"window.JSBridge.onSessionIdReceived"})," and will be called by Rapido when a session ID request is processed."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sessionId"})," (string|null): The retrieved session ID, or ",(0,r.jsx)(n.code,{children:"null"})," if no session exists"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementation-2",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Set the callback function directly on JSBridge\nwindow.JSBridge.onSessionIdReceived = function(sessionId) {\n    console.log('Session ID received from Rapido');\n    \n    // Validate sessionId parameter\n    if (sessionId && sessionId !== 'null') {\n        console.log('Session found:', sessionId);\n        // Handle existing session - validate with backend\n        validateExistingSession(sessionId);\n    } else {\n        console.log('No session found');\n        // Show login screen\n        showLoginScreen();\n    }\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"advanced-implementation",children:"Advanced Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Advanced callback with comprehensive error handling\nwindow.JSBridge.onSessionIdReceived = function(sessionId) {\n    try {\n        // Validate parameter\n        if (!sessionId || sessionId === 'null') {\n            console.log('No stored session - user needs to authenticate');\n            // Show login screen\n            return;\n        }\n        \n        // Show processing state\n        // showLoadingState('Validating session...');\n        \n        // Validate session with your backend\n        // NOTE: See API Examples documentation for complete backend implementation\n        validateSessionWithYourBackend(sessionId)\n            .then((isValid) => {\n                if (isValid) {\n                    // Session is valid - proceed to authenticated state\n                    console.log('Session valid - proceeding to app');\n                } else {\n                    // Session expired or invalid - clear and request new authentication\n                    clearStoredSession();\n                    // Show login screen\n                }\n            })\n            .catch((error) => {\n                console.error('Session validation failed:', error);\n                // Handle session validation error appropriately\n            })\n            .finally(() => {\n                // hideLoadingState();\n            });\n            \n    } catch (error) {\n        console.error('Session processing failed:', error);\n        // Handle session processing error\n    }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"onerrorerror",children:"onError(error)"}),"\n",(0,r.jsx)(n.p,{children:"Called when an error occurs during bridge operations."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"})," (string): Error message"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementation-3",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function onError(error) {\n    console.error('JSBridge Error:', error);\n    hideLoadingState();\n    showErrorMessage('Authentication failed. Please try again.');\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"bridge-readiness-check",children:"Bridge Readiness Check"}),"\n",(0,r.jsx)(n.h3,{id:"why-bridge-readiness-check-is-required",children:"Why Bridge Readiness Check is Required"}),"\n",(0,r.jsxs)(n.p,{children:["The JSBridge interface (",(0,r.jsx)(n.code,{children:"window.NativeJSBridge"}),") is injected asynchronously by the WebView. Even though ",(0,r.jsx)(n.code,{children:"window.onload"})," fires when the DOM is ready, the JavaScript interface might not be immediately accessible, creating a race condition."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bridge readiness check:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Immediate execution"})," - No waiting when bridge is ready"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Reliable detection"})," - Actively checks for bridge availability"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Graceful fallback"})," - Continues checking until bridge is ready"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Better performance"})," - Eliminates arbitrary delays"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"implementation-4",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Bridge readiness check with timeout protection\nfunction checkBridgeReady() {\n    const maxWaitTime = 5000; // Maximum 5 seconds\n    const startTime = window.bridgeCheckStartTime || (window.bridgeCheckStartTime = Date.now());\n    \n    if (window.NativeJSBridge && typeof window.NativeJSBridge.requestUserToken === 'function') {\n        // Bridge confirmed ready - proceed immediately\n        console.log('\u2705 Bridge ready in ' + (Date.now() - startTime) + 'ms');\n        window.NativeJSBridge.requestUserToken({ scope: [\"profile\"] });\n    } else if (Date.now() - startTime < maxWaitTime) {\n        // Bridge not ready - check again in 10ms\n        setTimeout(checkBridgeReady, 10);\n    } else {\n        // Timeout protection - prevent infinite waiting\n        console.error('\u274c Bridge failed to initialize within 5 seconds');\n        // Show fallback authentication method\n    }\n}\n\n## Bridge Detection and Compatibility\n\n### Checking Bridge Availability\n\n```javascript\nfunction isBridgeAvailable() {\n    return typeof window.NativeJSBridge === 'object' && window.NativeJSBridge !== null;\n}\n\nfunction checkBridgeCapabilities() {\n    if (!isBridgeAvailable()) {\n        return {\n            available: false,\n            capabilities: {}\n        };\n    }\n    \n    return {\n        available: true,\n        capabilities: {\n            requestUserToken: typeof window.NativeJSBridge.requestUserToken === 'function',\n            updateLoginStatus: typeof window.NativeJSBridge.updateLoginStatus === 'function',\n            storeSessionId: typeof window.NativeJSBridge.storeSessionId === 'function',\n            requestSessionId: typeof window.NativeJSBridge.requestSessionId === 'function'\n        }\n    };\n}\n\n// Usage\nconst bridge = checkBridgeCapabilities();\n\nif (bridge.available) {\n    console.log('Bridge capabilities:', bridge.capabilities);\n    \n    if (!bridge.capabilities.requestUserToken) {\n        console.warn('Token request not supported in this Rapido version');\n    }\n} else {\n    console.log('Running outside Rapido app or bridge not available');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function initializeWithFallback() {\n    const bridge = checkBridgeCapabilities();\n    \n    if (bridge.available && bridge.capabilities.requestUserToken) {\n        // Full bridge functionality available\n        initializeRapidoAuth();\n    } else if (bridge.available) {\n        // Partial bridge functionality\n        console.warn('Limited bridge functionality - some features may not work');\n        initializeWithLimitedFeatures();\n    } else {\n        // No bridge - provide alternative authentication\n        console.log('Bridge not available - using alternative auth');\n        initializeAlternativeAuth();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-and-debugging",children:"Testing and Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"debug-helper-functions",children:"Debug Helper Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Debug utilities for development\nconst RapidoBridgeDebug = {\n    logBridgeInfo() {\n        console.group('Rapido Bridge Debug Info');\n        console.log('Bridge available:', !!window.NativeJSBridge);\n        \n        if (window.NativeJSBridge) {\n            console.log('Methods available:', {\n                requestUserToken: typeof window.NativeJSBridge.requestUserToken,\n                storeSessionId: typeof window.NativeJSBridge.storeSessionId,\n                requestSessionId: typeof window.NativeJSBridge.requestSessionId\n            });\n            \n            // Try to get stored session\n            try {\n                // Set up callback for debug session check\n                window.JSBridge.onSessionIdReceived = function(sessionId) {\n                    console.log('Debug: Stored session:', sessionId);\n                };\n                window.NativeJSBridge.requestSessionId();\n            } catch (e) {\n                console.log('Could not request stored session:', e.message);\n            }\n        }\n        \n        console.log('JSBridge callback set:', typeof window.JSBridge.onTokenReceived);\n        console.groupEnd();\n    },\n    \n    testTokenCallback(mockToken = 'test-token-123') {\n        if (typeof window.JSBridge.onTokenReceived === 'function') {\n            console.log('Testing token callback with mock token');\n            window.JSBridge.onTokenReceived(mockToken);\n        } else {\n            console.error('onTokenReceived not defined');\n        }\n    },\n    \n    simulateBridgeEnvironment() {\n        if (!window.NativeJSBridge) {\n            console.log('Creating mock NativeJSBridge for testing');\n            window.NativeJSBridge = {\n                requestUserToken: () => {\n                    console.log('Mock: requestUserToken called');\n                    setTimeout(() => {\n                        if (window.JSBridge.onTokenReceived) {\n                            window.JSBridge.onTokenReceived('mock-token-' + Date.now());\n                        }\n                    }, 1000);\n                },\n                storeSessionId: (sessionId) => {\n                    console.log('Mock: storing session', sessionId);\n                    localStorage.setItem('mockRapidoSession', sessionId);\n                    return 'SUCCESS';\n                },\n                requestSessionId: () => {\n                    console.log('Mock: requesting session');\n                    const session = localStorage.getItem('mockRapidoSession');\n                    setTimeout(() => {\n                        if (window.JSBridge.onSessionIdReceived) {\n                            window.JSBridge.onSessionIdReceived(session);\n                        }\n                    }, 100);\n                }\n            };\n        }\n    }\n};\n\n// Use in development\nif (process.env.NODE_ENV === 'development') {\n    window.RapidoBridgeDebug = RapidoBridgeDebug;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,r.jsx)(n.p,{children:"When testing your JavaScript Bridge integration:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Bridge Detection"}),": Verify bridge availability detection works"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Token Request"}),": Test ",(0,r.jsx)(n.code,{children:"requestUserToken"})," with valid client ID"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Consent Flow"}),": Test both approval and denial scenarios"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Token Processing"}),": Verify ",(0,r.jsx)(n.code,{children:"onTokenReceived"})," callback works"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Session Storage"}),": Test ",(0,r.jsx)(n.code,{children:"storeSessionId"})," and ",(0,r.jsx)(n.code,{children:"requestSessionId"})]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Error Handling"}),": Test with invalid tokens and network failures"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Multiple Sessions"}),": Test session replacement and updates"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Bridge Unavailable"}),": Test graceful degradation when bridge is not available"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Bridge Readiness"}),": Test bridge readiness check with timeout protection"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Review ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/integration/basics",children:"Integration Basics"})," for complete implementation flow"]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/integration/events-tracking",children:"Events Tracking"})," for complete events tracking guide (PWA & Server-to-Server)"]}),"\n",(0,r.jsxs)(n.li,{children:["Check ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"})," for complete session management implementation"]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})," for production security requirements"]}),"\n",(0,r.jsxs)(n.li,{children:["Review ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/troubleshooting",children:"Troubleshooting"})," for common integration issues"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);