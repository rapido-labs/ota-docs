"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[259],{3372:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/token-validation","title":"Token Validation API","description":"The Token Validation API is the primary endpoint for validating user authentication tokens received from your PWA. This endpoint verifies the token\'s authenticity and returns user information upon successful validation.","source":"@site/docs/api/token-validation.md","sourceDirName":"api","slug":"/api/token-validation","permalink":"/ota-docs/docs/api/token-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/api/token-validation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Token Validation API","sidebar_label":"Token Validation","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/ota-docs/docs/api/overview"},"next":{"title":"Code Examples","permalink":"/ota-docs/docs/api/examples"}}');var r=s(4848),t=s(8453);const a={title:"Token Validation API",sidebar_label:"Token Validation",sidebar_position:2},o="Token Validation API",d={},l=[{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Validation",id:"validation",level:4},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (HTTP 200)",id:"success-response-http-200",level:3},{value:"Response Fields",id:"response-fields",level:4},{value:"Error Responses",id:"error-responses",level:3},{value:"Invalid Token (HTTP 401)",id:"invalid-token-http-401",level:4},{value:"Unauthorized (HTTP 401)",id:"unauthorized-http-401",level:4},{value:"Invalid Request (HTTP 400)",id:"invalid-request-http-400",level:4},{value:"Rate Limited (HTTP 429)",id:"rate-limited-http-429",level:4},{value:"Basic Usage Example",id:"basic-usage-example",level:2},{value:"Making the API Request",id:"making-the-api-request",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Security",id:"security",level:3},{value:"Performance",id:"performance",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Monitoring",id:"monitoring",level:3},{value:"Session Management Integration",id:"session-management-integration",level:2},{value:"Key Integration Points",id:"key-integration-points",level:3},{value:"Basic Session Flow",id:"basic-session-flow",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"token-validation-api",children:"Token Validation API"})}),"\n",(0,r.jsx)(n.p,{children:"The Token Validation API is the primary endpoint for validating user authentication tokens received from your PWA. This endpoint verifies the token's authenticity and returns user information upon successful validation."}),"\n",(0,r.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"URL"}),": ",(0,r.jsx)(n.code,{children:"POST /fetch-user-details"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validate authentication tokens and retrieve user data"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": Partner API Key required"]}),"\n",(0,r.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,r.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /ota/fetch-user-details HTTP/1.1\nHost: <rapido-host-url>\nContent-Type: application/json\nauthorization: CLIENT_KEY\nx-client-id: CLIENT_ID\nx-client-service: <your_service_offering>\nx-client-appid: <your_app_id>\nUser-Agent: YourApp/1.0.0\n"})}),"\n",(0,r.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"token"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsxs)(n.td,{children:["The authentication token received from your PWA via ",(0,r.jsx)(n.code,{children:"onTokenReceived"})]})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"validation",children:"Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Example validation before making API call\nfunction validateTokenRequest(token, clientId) {\n    if (!token || typeof token !== 'string') {\n        throw new Error('Token is required and must be a string');\n    }\n    \n    if (token.length < 50) {\n        throw new Error('Token appears to be invalid (too short)');\n    }\n    \n    if (!clientId || typeof clientId !== 'string') {\n        throw new Error('Client ID is required and must be a string');\n    }\n    \n    if (!allowedClients.includes(clientId)) {\n        throw new Error('invalid Client ID');\n    }\n}\n    \n    return true;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,r.jsx)(n.h3,{id:"success-response-http-200",children:"Success Response (HTTP 200)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "success": true,\n    "code": 7000,\n    "data": {\n        "user": {\n            "name": "John Doe",\n            "mobile": "7259206810"\n        }\n    },\n    "timestamp": "2025-09-04T12:52:38.061Z",\n    "requestId": "092a3dd0-898e-11f0-bf23-81aa54c4116d"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"response-fields",children:"Response Fields"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"success"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsxs)(n.td,{children:["Always ",(0,r.jsx)(n.code,{children:"true"})," for successful requests"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"code"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Response code for success (7000)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data.user.name"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"User's full name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data.user.mobile"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"User's phone number"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timestamp"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"ISO timestamp of the response"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"requestId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Unique request identifier"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,r.jsx)(n.h4,{id:"invalid-token-http-401",children:"Invalid Token (HTTP 401)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "code": 7001,\n    "error": {\n        "message": "Token Invalid"\n    },\n    "timestamp": "2025-09-04T12:45:47.474Z",\n    "requestId": "146fa320-898d-11f0-bf23-81aa54c4116d"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"unauthorized-http-401",children:"Unauthorized (HTTP 401)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "error": {\n        "code": "UNAUTHORIZED",\n        "message": "Invalid or missing Partner API key"\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"invalid-request-http-400",children:"Invalid Request (HTTP 400)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "code": 7002,\n    "error": {\n        "message": "ClientID Invalid",\n        "details": {}\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"rate-limited-http-429",children:"Rate Limited (HTTP 429)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "error": {\n        "code": "RATE_LIMITED",\n        "message": "Rate limit exceeded",\n        "details": {\n            "limit": 100,\n            "remaining": 0,\n            "resetTime": "2024-01-15T10:01:00Z"\n        }\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage-example",children:"Basic Usage Example"}),"\n",(0,r.jsx)(n.h3,{id:"making-the-api-request",children:"Making the API Request"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Basic API call pattern\nasync function validateRapidoToken(token) {\n    try {\n        const response = await fetch('<rapido-host-url>/api/ota/fetch-user-details', {\n            method: 'POST',\n            headers: {\n                'authorization': process.env.CLIENT_KEY,\n                'Content-Type': 'application/json',\n                'x-client-id': process.env.CLIENT_ID,\n                'x-client-service': '<your_service_offering>',\n                'x-client-appid': '<your_app_id>'\n            },\n            body: JSON.stringify({ token })\n        });\n        \n        const result = await response.json();\n        \n        if (result.success) {\n            // Token is valid - process user data\n            return {\n                valid: true,\n                user: result.data.user\n            };\n        } else {\n            // Token validation failed\n            return {\n                valid: false,\n                error: result.error?.message\n            };\n        }\n        \n    } catch (error) {\n        // Network or parsing error\n        return {\n            valid: false,\n            error: 'Network error during validation'\n        };\n    }\n}\n\n// Usage in your authentication endpoint\napp.post('/api/auth/rapido-login', async (req, res) => {\n    const { token } = req.body;\n    \n    // Validate with Rapido API\n    const validation = await validateRapidoToken(token);\n    \n    if (validation.valid) {\n        // Create user session and respond\n        const sessionId = await createUserSession(validation.user);\n        res.json({\n            success: true,\n            sessionId: sessionId, // Will be stored in Rapido's secure storage\n            user: validation.user\n        });\n    } else {\n        res.status(401).json({\n            success: false,\n            error: validation.error || 'Authentication failed'\n        });\n    }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For complete implementation examples in multiple languages, see ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Store API keys securely"})," - Use environment variables or secure key management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate all inputs"})," - Check token format and client ID before API calls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement request signing"})," - Use HMAC signing for additional security (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use HTTPS only"})," - Never make API calls over HTTP"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement caching"})," - Cache valid token responses for a short duration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use connection pooling"})," - Reuse HTTP connections for better performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set appropriate timeouts"})," - Default to 10 seconds for API calls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement retries"})," - Retry failed requests with exponential backoff"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle all error codes"})," - Implement specific handling for each error type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Log errors appropriately"})," - Log API errors for debugging but don't expose sensitive data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provide user feedback"})," - Return meaningful error messages to your frontend"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement fallbacks"})," - Have backup authentication methods if needed"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"monitoring",children:"Monitoring"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Track API usage"})," - Monitor request volume and success rates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up alerts"})," - Alert on high error rates or API unavailability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Log request IDs"})," - Include request IDs in logs for easier debugging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor performance"})," - Track API response times"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"session-management-integration",children:"Session Management Integration"}),"\n",(0,r.jsx)(n.p,{children:"After successful token validation, you'll need to implement session management for seamless user experience:"}),"\n",(0,r.jsx)(n.h3,{id:"key-integration-points",children:"Key Integration Points"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return Session ID"}),": Your authentication endpoint should return a ",(0,r.jsx)(n.code,{children:"sessionId"})," that will be stored in Rapido's secure storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Validation"}),": Implement a session validation endpoint for checking stored sessions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Cleanup"}),": Handle session expiration and cleanup appropriately"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-session-flow",children:"Basic Session Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// After successful token validation in your backend\napp.post('/api/auth/rapido-login', async (req, res) => {\n    // ... token validation logic ...\n    \n    if (tokenIsValid) {\n        // Generate secure session ID\n        const sessionId = generateSecureSessionId();\n        \n        // Store in your database with expiration\n        await createUserSession(userId, sessionId);\n        \n        res.json({\n            success: true,\n            sessionId: sessionId, // Rapido will store this securely\n            user: userData\n        });\n    }\n});\n\n// Session validation endpoint\napp.post('/api/auth/validate-session', async (req, res) => {\n    const { sessionId } = req.body;\n    const isValid = await validateUserSession(sessionId);\n    \n    res.json({ \n        valid: isValid,\n        // Include user data if valid\n    });\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For complete session management implementation with frontend integration, see ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"})," and ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/integration/javascript-bridge",children:"JavaScript Bridge"})," documentation."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Review ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"})," for more implementation samples"]}),"\n",(0,r.jsxs)(n.li,{children:["Check ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/integration/basics",children:"Integration Guide"})," for complete integration flow"]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})," for production deployment best practices"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);