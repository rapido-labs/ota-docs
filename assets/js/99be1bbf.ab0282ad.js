"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[259],{3372:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/token-validation","title":"Token Validation API","description":"The Token Validation API is the primary endpoint for validating user authentication tokens received from your PWA. This endpoint verifies the token\'s authenticity and returns user information upon successful validation.","source":"@site/docs/api/token-validation.md","sourceDirName":"api","slug":"/api/token-validation","permalink":"/ota-docs/docs/api/token-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/api/token-validation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Token Validation API","sidebar_label":"Token Validation","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/ota-docs/docs/api/overview"},"next":{"title":"Code Examples","permalink":"/ota-docs/docs/api/examples"}}');var t=r(4848),i=r(8453);const o={title:"Token Validation API",sidebar_label:"Token Validation",sidebar_position:2},a="Token Validation API",d={},l=[{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Validation",id:"validation",level:4},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (HTTP 200)",id:"success-response-http-200",level:3},{value:"Response Fields",id:"response-fields",level:4},{value:"Error Responses",id:"error-responses",level:3},{value:"Invalid Token (HTTP 401)",id:"invalid-token-http-401",level:4},{value:"Unauthorized (HTTP 401)",id:"unauthorized-http-401",level:4},{value:"Invalid Request (HTTP 400)",id:"invalid-request-http-400",level:4},{value:"Rate Limited (HTTP 429)",id:"rate-limited-http-429",level:4},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Node.js/Express Example",id:"nodejsexpress-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Security",id:"security",level:3},{value:"Performance",id:"performance",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Monitoring",id:"monitoring",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"token-validation-api",children:"Token Validation API"})}),"\n",(0,t.jsx)(n.p,{children:"The Token Validation API is the primary endpoint for validating user authentication tokens received from your PWA. This endpoint verifies the token's authenticity and returns user information upon successful validation."}),"\n",(0,t.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"URL"}),": ",(0,t.jsx)(n.code,{children:"POST /fetch-user-details"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Validate authentication tokens and retrieve user data"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Partner API Key required"]}),"\n",(0,t.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,t.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"POST /ota/fetch-user-details HTTP/1.1\nHost: api.rapido.bike\nContent-Type: application/json\nauthorization: CLIENT_KEY\nx-client-id: CLIENT_ID\nx-client-service: <your_service_offering>\nx-client-appid: <your_app_id>\nUser-Agent: YourApp/1.0.0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"token"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsxs)(n.td,{children:["The authentication token received from your PWA via ",(0,t.jsx)(n.code,{children:"onTokenReceived"})]})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"validation",children:"Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Example validation before making API call\nfunction validateTokenRequest(token, clientId) {\n    if (!token || typeof token !== 'string') {\n        throw new Error('Token is required and must be a string');\n    }\n    \n    if (token.length < 50) {\n        throw new Error('Token appears to be invalid (too short)');\n    }\n    \n    if (!clientId || typeof clientId !== 'string') {\n        throw new Error('Client ID is required and must be a string');\n    }\n    \n    if (!allowedClients.includes(clientId)) {\n        throw new Error('invalid Client ID');\n    }\n}\n    \n    return true;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,t.jsx)(n.h3,{id:"success-response-http-200",children:"Success Response (HTTP 200)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "success": true,\n    "code": 7000,\n    "data": {\n        "user": {\n            "name": "Satya",\n            "mobile": "7259206810"\n        }\n    },\n    "timestamp": "2025-09-04T12:52:38.061Z",\n    "requestId": "092a3dd0-898e-11f0-bf23-81aa54c4116d"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"response-fields",children:"Response Fields"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"success"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsxs)(n.td,{children:["Always ",(0,t.jsx)(n.code,{children:"true"})," for successful requests"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"code"})}),(0,t.jsx)(n.td,{children:"number"}),(0,t.jsx)(n.td,{children:"Response code for success (7000)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"data.user.name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"User's full name"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"data.user.mobile"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"User's phone number"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"timestamp"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"ISO timestamp of the response"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"requestId"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Unique request identifier"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsx)(n.h4,{id:"invalid-token-http-401",children:"Invalid Token (HTTP 401)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "code": 7001,\n    "error": {\n        "message": "Token Invalid"\n    },\n    "timestamp": "2025-09-04T12:45:47.474Z",\n    "requestId": "146fa320-898d-11f0-bf23-81aa54c4116d"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"unauthorized-http-401",children:"Unauthorized (HTTP 401)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "error": {\n        "code": "UNAUTHORIZED",\n        "message": "Invalid or missing Partner API key"\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"invalid-request-http-400",children:"Invalid Request (HTTP 400)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "code": 7002,\n    "error": {\n        "message": "ClientID Invalid",\n        "details": {}\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"rate-limited-http-429",children:"Rate Limited (HTTP 429)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "success": false,\n    "error": {\n        "code": "RATE_LIMITED",\n        "message": "Rate limit exceeded",\n        "details": {\n            "limit": 100,\n            "remaining": 0,\n            "resetTime": "2024-01-15T10:01:00Z"\n        }\n    },\n    "timestamp": "2024-01-15T10:00:30Z",\n    "requestId": "req_1234567890"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsx)(n.h3,{id:"nodejsexpress-example",children:"Node.js/Express Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const axios = require('axios');\n\nclass RapidoTokenValidator {\n    constructor(apiKey, environment = 'production') {\n        this.apiKey = apiKey;\n        this.baseURL = this.getBaseURL(environment);\n    }\n    \n    getBaseURL(environment) {\n        const urls = {\n            production: '<rapido-host-url-prod>/api/ota',\n            staging: '<rapido-host-url-staging>/api/ota',\n            sandbox: '<rapido-host-url-sandbox>/api/ota'\n        };\n        return urls[environment] || urls.production;\n    }\n    \n    async validateToken(token, clientId) {\n        try {\n            // Validate inputs\n            this.validateInputs(token, clientId);\n            \n            // Make API request\n            const response = await axios.post(\n                `${this.baseURL}/fetch-user-details`,\n                {\n                    token: token\n                },\n                {\n                    headers: {\n                        'authorization': `${this.apiKey}`,\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'YourApp/1.0.0',\n                        'x-client-id': clientId,\n                        'x-client-service': '<your_service_offering>',\n                        'x-client-appid': '<your_app_id>'\n                    },\n                    timeout: 10000 // 10 seconds\n                }\n            );\n            \n            return response.data;\n            \n        } catch (error) {\n            throw this.handleAPIError(error);\n        }\n    }\n    \n    validateInputs(token, clientId) {\n        if (!token || typeof token !== 'string') {\n            throw new Error('Token is required and must be a string');\n        }\n        \n        if (!clientId || typeof clientId !== 'string') {\n            throw new Error('Client ID is required and must be a string');\n        }\n    }\n    \n    generateRequestId() {\n        return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    \n    handleAPIError(error) {\n        if (error.response) {\n            // API returned an error response\n            const { status, data } = error.response;\n            const apiError = new Error(data.error?.message || 'API request failed');\n            apiError.status = status;\n            apiError.code = data.error?.code;\n            apiError.details = data.error?.details;\n            return apiError;\n        } else if (error.request) {\n            // Network error\n            return new Error('Network error: Unable to reach Rapido API');\n        } else {\n            // Other error\n            return error;\n        }\n    }\n}\n\n// Usage in Express route\napp.post('/api/auth/rapido-login', async (req, res) => {\n    try {\n        const { token } = req.body;\n        const clientId = process.env.CLIENT_ID;\n        \n        const validator = new RapidoTokenValidator(\n            process.env.CLIENT_KEY,\n            process.env.NODE_ENV === 'production' ? 'production' : 'staging'\n        );\n        \n        const result = await validator.validateToken(token, clientId);\n        \n        if (result.success && result.data.valid) {\n            const userData = result.data.user;\n            \n            // Create or update user in your database\n            const user = await createOrUpdateUser(userData);\n            \n            // Generate session\n            const sessionId = await createUserSession(user.id);\n            \n            res.json({\n                success: true,\n                sessionId: sessionId,\n                user: {\n                    id: user.id,\n                    name: user.name,\n                    email: user.email\n                }\n            });\n        } else {\n            res.status(401).json({\n                success: false,\n                error: 'Token validation failed'\n            });\n        }\n        \n    } catch (error) {\n        console.error('Authentication error:', error);\n        \n        const status = error.status || 500;\n        res.status(status).json({\n            success: false,\n            error: error.message || 'Authentication failed'\n        });\n    }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import requests\nimport os\nimport time\nimport random\nimport string\nfrom typing import Dict, Any\n\nclass RapidoTokenValidator:\n    def __init__(self, api_key: str, environment: str = 'production'):\n        self.api_key = api_key\n        self.base_url = self._get_base_url(environment)\n        \n    def _get_base_url(self, environment: str) -> str:\n        urls = {\n            'production': '<rapido-host-url-prod>/api/ota',\n            'staging': '<rapido-host-url-staging>/api/ota',\n            'sandbox': '<rapido-host-url-sandbox>/api/ota'\n        }\n        return urls.get(environment, urls['production'])\n    \n    def validate_token(self, token: str, client_id: str) -> Dict[Any, Any]:\n        \"\"\"Validate a user token with Rapido API\"\"\"\n        \n        # Validate inputs\n        self._validate_inputs(token, client_id)\n        \n        # Prepare request\n        url = f\"{self.base_url}/fetch-user-details\"\n        headers = {\n            'authorization': f'{self.api_key}',\n            'Content-Type': 'application/json',\n            'User-Agent': 'YourApp/1.0.0',\n            'x-client-id': client_id,\n            'x-client-service': '<your_service_offering>',\n            'x-client-appid': '<your_app_id>'\n        }\n        data = {\n            'token': token\n        }\n        \n        try:\n            response = requests.post(\n                url, \n                json=data, \n                headers=headers, \n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                self._handle_api_error(response)\n                \n        except requests.RequestException as e:\n            raise Exception(f\"Network error: {str(e)}\")\n    \n    def _validate_inputs(self, token: str, client_id: str):\n        if not token or not isinstance(token, str):\n            raise ValueError(\"Token is required and must be a string\")\n        \n        if not client_id or not isinstance(client_id, str):\n            raise ValueError(\"Client ID is required and must be a string\")\n    \n    def _generate_request_id(self) -> str:\n        timestamp = str(int(time.time()))\n        random_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))\n        return f\"req_{timestamp}_{random_str}\"\n    \n    def _handle_api_error(self, response):\n        try:\n            error_data = response.json()\n            error_message = error_data.get('error', {}).get('message', 'API request failed')\n        except:\n            error_message = f\"HTTP {response.status_code}: {response.text}\"\n        \n        raise Exception(error_message)\n\n# Usage example\ndef authenticate_user(token: str) -> Dict[Any, Any]:\n    try:\n        validator = RapidoTokenValidator(\n            api_key=os.environ['CLIENT_KEY'],\n            environment='production' if os.environ.get('ENV') == 'production' else 'staging'\n        )\n        \n        client_id = os.environ['CLIENT_ID']\n        result = validator.validate_token(token, client_id)\n        \n        if result.get('success') and result.get('data', {}).get('valid'):\n            user_data = result['data']['user']\n            \n            # Process user authentication\n            # ... your user creation/update logic here\n            \n            return {\n                'success': True,\n                'user': user_data\n            }\n        else:\n            return {\n                'success': False,\n                'error': 'Token validation failed'\n            }\n            \n    except Exception as e:\n        return {\n            'success': False,\n            'error': str(e)\n        }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Store API keys securely"})," - Use environment variables or secure key management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate all inputs"})," - Check token format and client ID before API calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement request signing"})," - Use HMAC signing for additional security (optional)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use HTTPS only"})," - Never make API calls over HTTP"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement caching"})," - Cache valid token responses for a short duration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use connection pooling"})," - Reuse HTTP connections for better performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set appropriate timeouts"})," - Default to 10 seconds for API calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement retries"})," - Retry failed requests with exponential backoff"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle all error codes"})," - Implement specific handling for each error type"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log errors appropriately"})," - Log API errors for debugging but don't expose sensitive data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide user feedback"})," - Return meaningful error messages to your frontend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement fallbacks"})," - Have backup authentication methods if needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"monitoring",children:"Monitoring"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Track API usage"})," - Monitor request volume and success rates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set up alerts"})," - Alert on high error rates or API unavailability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log request IDs"})," - Include request IDs in logs for easier debugging"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor performance"})," - Track API response times"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Review ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"})," for more implementation samples"]}),"\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/integration/basics",children:"Integration Guide"})," for complete integration flow"]}),"\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})," for production deployment best practices"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);