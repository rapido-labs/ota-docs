"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[822],{4143:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"quickstart","title":"Quick Start Guide","description":"Get your PWA integrated with Rapido in under 30 minutes. This guide provides a step-by-step process with minimal working examples to get you up and running quickly.","source":"@site/docs/quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/ota-docs/docs/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/quickstart.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Quick Start Guide","sidebar_label":"Quick Start","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/ota-docs/docs/overview"},"next":{"title":"Integration Basics","permalink":"/ota-docs/docs/integration/basics"}}');var t=i(4848),o=i(8453);const r={title:"Quick Start Guide",sidebar_label:"Quick Start",sidebar_position:3},a="Quick Start Guide",d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Implement JavaScript Bridge Interface",id:"step-1-implement-javascript-bridge-interface",level:2},{value:"Add the Token Callback Functions",id:"add-the-token-callback-functions",level:3},{value:"Step 2: Backend Token Validation",id:"step-2-backend-token-validation",level:2},{value:"Node.js/Express Example",id:"nodejsexpress-example",level:3},{value:"Step 3: Configure Your PWA URL",id:"step-3-configure-your-pwa-url",level:2},{value:"URL Handling Example",id:"url-handling-example",level:3},{value:"Step 4: Test Your Integration",id:"step-4-test-your-integration",level:2},{value:"Testing Checklist",id:"testing-checklist",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Step 5: Production Checklist",id:"step-5-production-checklist",level:2},{value:"Common Issues and Quick Fixes",id:"common-issues-and-quick-fixes",level:2},{value:"<code>onTokenReceived</code> not called",id:"ontokenreceived-not-called",level:3},{value:"Bridge methods not available",id:"bridge-methods-not-available",level:3},{value:"Token validation fails",id:"token-validation-fails",level:3},{value:"Bridge timeout errors",id:"bridge-timeout-errors",level:3},{value:"Session storage fails",id:"session-storage-fails",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,t.jsx)(n.p,{children:"Get your PWA integrated with Rapido in under 30 minutes. This guide provides a step-by-step process with minimal working examples to get you up and running quickly."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before starting, ensure you have:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 A PWA hosted on ",(0,t.jsx)(n.strong,{children:"HTTPS"})," (required for security)"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 Backend server capable of making ",(0,t.jsx)(n.strong,{children:"HTTPS API calls"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 Basic knowledge of ",(0,t.jsx)(n.strong,{children:"JavaScript"})," and ",(0,t.jsx)(n.strong,{children:"REST APIs"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Partner credentials"})," from Rapido (contact integration team if needed)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-1-implement-javascript-bridge-interface",children:"Step 1: Implement JavaScript Bridge Interface"}),"\n",(0,t.jsx)(n.p,{children:"Your PWA needs to implement the required callback functions and use Rapido's JavaScript Bridge methods."}),"\n",(0,t.jsx)(n.h3,{id:"add-the-token-callback-functions",children:"Add the Token Callback Functions"}),"\n",(0,t.jsx)(n.p,{children:"Add these functions to your PWA's main HTML file or JavaScript bundle:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html>\n<head>\n    <title>Your PWA</title>\n</head>\n<body>\n    \x3c!-- Your PWA content --\x3e\n    \n    <script>\n        // REQUIRED: These functions will be called by Rapido\n        function onTokenReceived(token) {\n            console.log('Received token from Rapido:', token);\n            \n            // Send token to your backend for validation\n            fetch('/api/auth/rapido-login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ token: token })\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // Store the session ID using Rapido's secure storage\n                    if (window.NativeJSBridge && window.NativeJSBridge.storeSessionId) {\n                        const result = window.NativeJSBridge.storeSessionId(data.sessionId);\n                        if (result === 'SUCCESS') {\n                            console.log('Session stored successfully');\n                        } else {\n                            console.warn('Failed to store session:', result);\n                        }\n                    }\n                    // Redirect to authenticated view\n                    window.location.href = '/dashboard';\n                } else {\n                    console.error('Authentication failed:', data.error);\n                }\n            })\n            .catch(error => {\n                console.error('Error during authentication:', error);\n            });\n        }\n\n        function onUserSkippedLogin() {\n            console.log('User skipped login');\n            // Handle user declining authentication\n        }\n\n        function onError(error) {\n            console.error('JSBridge Error:', error);\n            // Handle bridge errors\n        }\n\n        // Bridge readiness check with timeout protection\n        function checkBridgeReady() {\n            const maxWaitTime = 5000; // Maximum 5 seconds\n            const startTime = window.bridgeCheckStartTime || (window.bridgeCheckStartTime = Date.now());\n            \n            if (window.NativeJSBridge && typeof window.NativeJSBridge.requestUserToken === 'function') {\n                // Bridge is ready, proceed immediately\n                console.log('\u2705 Bridge ready in ' + (Date.now() - startTime) + 'ms');\n                initializeAuth();\n            } else if (Date.now() - startTime < maxWaitTime) {\n                // Bridge not ready, check again in 10ms\n                setTimeout(checkBridgeReady, 10);\n            } else {\n                // Timeout reached, handle gracefully\n                console.error('\u274c Bridge failed to initialize within 5 seconds');\n                // Show fallback authentication or error message\n            }\n        }\n\n        // Check for existing session or initiate authentication\n        function initializeAuth() {\n            const urlParams = new URLSearchParams(window.location.search);\n            const sessionId = urlParams.get('sessionId');\n            \n            if (sessionId) {\n                // Session ID provided in URL - validate it\n                validateSession(sessionId);\n            } else {\n                // No session ID - check if we have one stored\n                if (window.NativeJSBridge && window.NativeJSBridge.fetchSessionId) {\n                    const storedSessionId = window.NativeJSBridge.fetchSessionId();\n                    if (storedSessionId && storedSessionId !== 'null') {\n                        validateSession(storedSessionId);\n                    } else {\n                        // No stored session - request new token\n                        requestNewToken();\n                    }\n                } else {\n                    requestNewToken();\n                }\n            }\n        }\n\n        function requestNewToken() {\n            // Request token from Rapido\n            if (window.NativeJSBridge && window.NativeJSBridge.requestUserToken) {\n                // Replace 'your-client-id' with your actual client ID from Rapido\n                window.NativeJSBridge.requestUserToken('your-client-id');\n            } else {\n                console.error('Rapido NativeJSBridge interface not available');\n            }\n        }\n\n        function validateSession(sessionId) {\n            // Logic to validate sessionId if any.\n        }\n\n        // Initialize authentication when page loads\n        window.onload = function() {\n            checkBridgeReady();\n        };\n    <\/script>\n</body>\n</html>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-2-backend-token-validation",children:"Step 2: Backend Token Validation"}),"\n",(0,t.jsx)(n.p,{children:"Implement the backend endpoints to validate tokens and manage sessions."}),"\n",(0,t.jsx)(n.h3,{id:"nodejsexpress-example",children:"Node.js/Express Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\nconst axios = require('axios');\nconst app = express();\n\napp.use(express.json());\n\n// Endpoint to handle Rapido token authentication\napp.post('/api/auth/rapido-login', async (req, res) => {\n    try {\n        const { token } = req.body;\n        \n        // Validate token with Rapido's API\n        const rapidoResponse = await axios.post('https://rapido_ota_host/api/ota/fetch-user-details', \n            { token: token },\n            {\n                headers: {\n                    'authorization': 'CLIENT_KEY',\n                    'x-client-id': 'CLIENT_ID',\n                    'Content-Type': 'application/json'\n                }\n            }\n        );\n        \n        if (rapidoResponse.data) {\n            const userData = rapidoResponse.data.user;\n            \n            // Create or update user in your system\n            const user = await createOrUpdateUser(userData);\n            \n            // Generate session ID\n            const sessionId = generateSecureSessionId();\n            \n            // Store session in your database\n            await storeSession(sessionId, user.mobile);\n            \n            res.json({\n                success: true,\n                sessionId: sessionId,\n                user: {\n                    mobile: user.mobile,\n                    name: user.name,\n                    // Don't send sensitive data to frontend\n                }\n            });\n        } else {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid token'\n            });\n        }\n    } catch (error) {\n        console.error('Authentication error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Authentication failed'\n        });\n    }\n});\n\n// Helper functions (implement based on your database)\nasync function createOrUpdateUser(userData) {\n    // Implement user creation/update logic\n}\n\nfunction generateSecureSessionId() {\n    // Generate cryptographically secure session ID\n}\n\nasync function storeSession(sessionId, userId) {\n    // Store session in your database with expiration\n}\n\nasync function getSessionFromDatabase(sessionId) {\n    // Retrieve session from your database\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-configure-your-pwa-url",children:"Step 3: Configure Your PWA URL"}),"\n",(0,t.jsxs)(n.p,{children:["Ensure your PWA can handle the ",(0,t.jsx)(n.code,{children:"sessionId"})," parameter in the URL:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"https://your-pwa.com/app?sessionId={sessionId}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"url-handling-example",children:"URL Handling Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Parse URL parameters\nconst urlParams = new URLSearchParams(window.location.search);\nconst sessionId = urlParams.get('sessionId');\n\nif (sessionId) {\n    // User has existing session - validate and proceed\n    console.log('Found session ID:', sessionId);\n} else {\n    // No session ID - need to authenticate\n    console.log('No session ID found - initiating authentication');\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-4-test-your-integration",children:"Step 4: Test Your Integration"}),"\n",(0,t.jsx)(n.h3,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"First-time Access Test"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Launch PWA from Rapido without ",(0,t.jsx)(n.code,{children:"sessionId"})]}),"\n",(0,t.jsx)(n.li,{children:"Verify consent screen appears"}),"\n",(0,t.jsxs)(n.li,{children:["Approve consent and verify ",(0,t.jsx)(n.code,{children:"onTokenReceived"})," is called"]}),"\n",(0,t.jsx)(n.li,{children:"Verify backend receives and validates token successfully"}),"\n",(0,t.jsxs)(n.li,{children:["Verify session ID is stored using ",(0,t.jsx)(n.code,{children:"storeSessionId"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returning User Test"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Close and reopen PWA from Rapido"}),"\n",(0,t.jsxs)(n.li,{children:["Verify PWA is launched with ",(0,t.jsx)(n.code,{children:"sessionId"})," parameter in the URL"]}),"\n",(0,t.jsx)(n.li,{children:"Verify user is logged in without showing consent screen"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Session Storage Test"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Verify stored session ID is retrieved using ",(0,t.jsx)(n.code,{children:"fetchSessionId"})]}),"\n",(0,t.jsx)(n.li,{children:"Verify session validation works correctly"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Bridge Readiness Test"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify bridge readiness check works correctly"}),"\n",(0,t.jsx)(n.li,{children:"Test timeout handling when bridge is not available"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,t.jsx)(n.p,{children:"Add console logging to track the authentication flow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Enable debug mode for development\nconst DEBUG_MODE = true;\n\nfunction debugLog(message, data = null) {\n    if (DEBUG_MODE) {\n        console.log(`[Rapido Integration] ${message}`, data);\n    }\n}\n\n// Use throughout your integration\ndebugLog('Token received', token);\ndebugLog('Session stored', sessionId);\ndebugLog('Bridge ready', bridgeCapabilities);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-5-production-checklist",children:"Step 5: Production Checklist"}),"\n",(0,t.jsx)(n.p,{children:"Before going live, ensure:"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Remove all debug logging and test code"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Use production Rapido API endpoints"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implement proper error handling for all scenarios"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Set up monitoring for authentication failures"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test with actual Rapido app (not web view simulator)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verify HTTPS certificates are valid"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implement rate limiting on your authentication endpoints"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test bridge readiness check with timeout protection"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verify all callback functions are properly implemented"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-issues-and-quick-fixes",children:"Common Issues and Quick Fixes"}),"\n",(0,t.jsxs)(n.h3,{id:"ontokenreceived-not-called",children:[(0,t.jsx)(n.code,{children:"onTokenReceived"})," not called"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Ensure the function is globally accessible and not inside a module scope."]}),"\n",(0,t.jsx)(n.h3,{id:"bridge-methods-not-available",children:"Bridge methods not available"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Add bridge readiness check with timeout protection before calling bridge methods."]}),"\n",(0,t.jsx)(n.h3,{id:"token-validation-fails",children:"Token validation fails"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Verify your backend token validation logic and ensure proper error handling."]}),"\n",(0,t.jsx)(n.h3,{id:"bridge-timeout-errors",children:"Bridge timeout errors"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Implement proper bridge readiness check with timeout protection."]}),"\n",(0,t.jsx)(n.h3,{id:"session-storage-fails",children:"Session storage fails"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Check that ",(0,t.jsx)(n.code,{children:"storeSessionId"}),' returns "SUCCESS" and handle error cases.']}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For detailed implementation guidance, see ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/integration/basics",children:"Basic Integration Flow"})]}),"\n",(0,t.jsxs)(n.li,{children:["For complete JavaScript Bridge documentation, see ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/integration/javascript-bridge",children:"JS Bridge API"})]}),"\n",(0,t.jsxs)(n.li,{children:["For security best practices, see ",(0,t.jsx)(n.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);