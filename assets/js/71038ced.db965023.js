"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[28],{1956:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/examples","title":"API Examples","description":"This page provides complete, production-ready code examples for integrating with Rapido\'s Partner APIs across different programming languages and frameworks.","source":"@site/docs/api/examples.md","sourceDirName":"api","slug":"/api/examples","permalink":"/ota-docs/docs/api/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/api/examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"API Examples","sidebar_label":"Code Examples","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Token Validation","permalink":"/ota-docs/docs/api/token-validation"},"next":{"title":"Security","permalink":"/ota-docs/docs/security"}}');var t=s(4848),o=s(8453);const a={title:"API Examples",sidebar_label:"Code Examples",sidebar_position:3},i="API Integration Examples",d={},l=[{value:"Complete Integration Example (Node.js)",id:"complete-integration-example-nodejs",level:2},{value:"Python/Django Example",id:"pythondjango-example",level:2},{value:"PHP/Laravel Example",id:"phplaravel-example",level:2},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"Comprehensive Error Handler (Node.js)",id:"comprehensive-error-handler-nodejs",level:3},{value:"Testing Examples",id:"testing-examples",level:2},{value:"Unit Tests (Jest)",id:"unit-tests-jest",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-integration-examples",children:"API Integration Examples"})}),"\n",(0,t.jsx)(n.p,{children:"This page provides complete, production-ready code examples for integrating with Rapido's Partner APIs across different programming languages and frameworks."}),"\n",(0,t.jsx)(n.h2,{id:"complete-integration-example-nodejs",children:"Complete Integration Example (Node.js)"}),"\n",(0,t.jsx)(n.p,{children:"Here's a comprehensive Node.js implementation with Express.js:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\nconst axios = require('axios');\nconst crypto = require('crypto');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\n\n// Configuration\nconst config = {\n    rapido: {\n        apiKey: process.env.CLIENT_KEY,\n        clientId: process.env.CLIENT_ID,\n        baseURL: process.env.NODE_ENV === 'production' \n            ? '<rapido-host-url-prod>/api/ota'\n            : '<rapido-host-url-staging>/api/ota',\n        timeout: 10000\n    },\n    session: {\n        secret: process.env.SESSION_SECRET,\n        expiry: 24 * 60 * 60 * 1000 // 24 hours\n    }\n};\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Rate limiting\nconst authLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 50, // Limit each IP to 50 requests per windowMs\n    message: {\n        success: false,\n        error: 'Too many authentication attempts, please try again later'\n    }\n});\n\napp.use('/api/auth', authLimiter);\n\n// Rapido API Client\nclass RapidoAPIClient {\n    constructor(config) {\n        this.config = config;\n        this.axios = axios.create({\n            baseURL: config.baseURL,\n            timeout: config.timeout,\n            headers: {\n                'Authorization': `${config.apiKey}`,\n                'Content-Type': 'application/json',\n                'User-Agent': 'PartnerApp/1.0.0'\n            }\n        });\n        \n        // Add request interceptor for logging\n        this.axios.interceptors.request.use(\n            (config) => {\n                console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n                return config;\n            },\n            (error) => {\n                console.error('API Request Error:', error);\n                return Promise.reject(error);\n            }\n        );\n        \n        // Add response interceptor for error handling\n        this.axios.interceptors.response.use(\n            (response) => {\n                console.log(`API Response: ${response.status} ${response.config.url}`);\n                return response;\n            },\n            (error) => {\n                this.handleAPIError(error);\n                return Promise.reject(error);\n            }\n        );\n    }\n    \n    async validateToken(token) {\n        const requestId = this.generateRequestId();\n        \n        try {\n            const response = await this.axios.post('/fetch-user-details', {\n                token: token\n            }, {\n                headers: {\n                    'x-client-id': this.config.clientId,\n                    'x-client-service': '<your_service_offering>',\n                    'x-client-appid': '<your_app_id>'\n                }\n            });\n            \n            return response.data;\n        } catch (error) {\n            console.error(`Token validation failed (${requestId}):`, error.message);\n            throw error;\n        }\n    }\n    \n    generateRequestId() {\n        return `req_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n    }\n    \n    handleAPIError(error) {\n        if (error.response) {\n            const { status, data } = error.response;\n            console.error(`API Error ${status}:`, data);\n            \n            // Add specific error handling based on status codes\n            switch (status) {\n                case 401:\n                    console.error('Unauthorized: Check API key configuration');\n                    break;\n                case 429:\n                    console.error('Rate limited: Slow down API requests');\n                    break;\n                case 503:\n                    console.error('Service unavailable: Rapido API is down');\n                    break;\n            }\n        } else if (error.request) {\n            console.error('Network Error: Unable to reach Rapido API');\n        }\n    }\n}\n\n// Database models (example with MongoDB/Mongoose)\nconst userSchema = {\n    rapidoUserId: String,\n    name: String,\n    email: String,\n    mobile: String,\n    profile: Object,\n    createdAt: { type: Date, default: Date.now },\n    lastLoginAt: Date\n};\n\nconst sessionSchema = {\n    sessionId: String,\n    userId: String,\n    expiresAt: Date,\n    createdAt: { type: Date, default: Date.now },\n    lastAccessedAt: Date\n};\n\n// Services\nclass UserService {\n    static async createOrUpdateUser(userData) {\n        // Implementation depends on your database\n        // This is a conceptual example\n        \n        const existingUser = await User.findOne({ \n            rapidoUserId: userData.id \n        });\n        \n        if (existingUser) {\n            // Update existing user\n            existingUser.name = userData.name;\n            existingUser.email = userData.email;\n            existingUser.mobile = userData.mobile;\n            existingUser.profile = userData.profile;\n            existingUser.lastLoginAt = new Date();\n            \n            return await existingUser.save();\n        } else {\n            // Create new user\n            const newUser = new User({\n                rapidoUserId: userData.id,\n                name: userData.name,\n                email: userData.email,\n                mobile: userData.mobile,\n                profile: userData.profile,\n                lastLoginAt: new Date()\n            });\n            \n            return await newUser.save();\n        }\n    }\n}\n\nclass SessionService {\n    static generateSessionId() {\n        return crypto.randomBytes(32).toString('hex');\n    }\n    \n    static async createSession(userId) {\n        const sessionId = this.generateSessionId();\n        const expiresAt = new Date(Date.now() + config.session.expiry);\n        \n        const session = new Session({\n            sessionId,\n            userId,\n            expiresAt,\n            lastAccessedAt: new Date()\n        });\n        \n        await session.save();\n        \n        return {\n            sessionId,\n            expiresAt\n        };\n    }\n    \n    static async validateSession(sessionId) {\n        const session = await Session.findOne({ \n            sessionId,\n            expiresAt: { $gt: new Date() }\n        });\n        \n        if (session) {\n            // Update last accessed time\n            session.lastAccessedAt = new Date();\n            await session.save();\n            \n            return {\n                valid: true,\n                userId: session.userId\n            };\n        } else {\n            // Clean up expired session\n            await Session.deleteOne({ sessionId });\n            return { valid: false };\n        }\n    }\n    \n    static async deleteSession(sessionId) {\n        await Session.deleteOne({ sessionId });\n    }\n}\n\n// Initialize Rapido API client\nconst rapidoAPI = new RapidoAPIClient(config.rapido);\n\n// Routes\napp.post('/api/auth/rapido-login', async (req, res) => {\n    try {\n        const { token } = req.body;\n        \n        // Validate request\n        if (!token) {\n            return res.status(400).json({\n                success: false,\n                error: 'Token is required'\n            });\n        }\n        \n        // Validate token with Rapido\n        const rapidoResponse = await rapidoAPI.validateToken(token);\n        \n        if (rapidoResponse.success && rapidoResponse.data.valid) {\n            const userData = rapidoResponse.data.user;\n            \n            // Create or update user\n            const user = await UserService.createOrUpdateUser(userData);\n            \n            // Create session\n            const sessionData = await SessionService.createSession(user._id);\n            \n            res.json({\n                success: true,\n                sessionId: sessionData.sessionId,\n                user: {\n                    id: user._id,\n                    name: user.name,\n                    email: user.email\n                },\n                expiresAt: sessionData.expiresAt\n            });\n            \n        } else {\n            res.status(401).json({\n                success: false,\n                error: 'Token validation failed'\n            });\n        }\n        \n    } catch (error) {\n        console.error('Authentication error:', error);\n        \n        // Return appropriate error based on error type\n        if (error.response?.status === 401) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid or expired token'\n            });\n        } else if (error.response?.status === 429) {\n            res.status(429).json({\n                success: false,\n                error: 'Rate limit exceeded. Please try again later.'\n            });\n        } else {\n            res.status(500).json({\n                success: false,\n                error: 'Authentication service temporarily unavailable'\n            });\n        }\n    }\n});\n\napp.post('/api/auth/validate-session', async (req, res) => {\n    try {\n        const { sessionId } = req.body;\n        \n        if (!sessionId) {\n            return res.json({ valid: false });\n        }\n        \n        const validation = await SessionService.validateSession(sessionId);\n        \n        res.json(validation);\n        \n    } catch (error) {\n        console.error('Session validation error:', error);\n        res.json({ valid: false });\n    }\n});\n\napp.post('/api/auth/logout', async (req, res) => {\n    try {\n        const { sessionId } = req.body;\n        \n        if (sessionId) {\n            await SessionService.deleteSession(sessionId);\n        }\n        \n        res.json({ success: true });\n        \n    } catch (error) {\n        console.error('Logout error:', error);\n        res.json({ success: true }); // Always return success for logout\n    }\n});\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n    res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV || 'development'\n    });\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n    console.error('Unhandled error:', error);\n    \n    res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n    });\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n\nmodule.exports = app;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pythondjango-example",children:"Python/Django Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import os\nimport time\nimport hashlib\nimport secrets\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, Optional\n\nimport requests\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom django.utils.decorators import method_decorator\nfrom django.views import View\nfrom django.conf import settings\nimport json\n\n# Configuration\nRAPIDO_CONFIG = {\n    'API_KEY': os.environ.get('CLIENT_KEY'),\n    'CLIENT_ID': os.environ.get('CLIENT_ID'),\n    'BASE_URL': '<rapido-host-url-prod>/api/ota' if os.environ.get('ENV') == 'production' \n               else '<rapido-host-url-staging>/api/ota',\n    'TIMEOUT': 10\n}\n\nclass RapidoAPIClient:\n    def __init__(self):\n        self.api_key = RAPIDO_CONFIG['API_KEY']\n        self.client_id = RAPIDO_CONFIG['CLIENT_ID']\n        self.base_url = RAPIDO_CONFIG['BASE_URL']\n        self.timeout = RAPIDO_CONFIG['TIMEOUT']\n    \n    def validate_token(self, token: str) -> Dict[str, Any]:\n        \"\"\"Validate token with Rapido API\"\"\"\n        \n        url = f\"{self.base_url}/fetch-user-details\"\n        headers = {\n            'authorization': f'{self.api_key}',\n            'Content-Type': 'application/json',\n            'User-Agent': 'PartnerApp/1.0.0',\n            'x-client-id': self.client_id,\n            'x-client-service': '<your_service_offering>',\n            'x-client-appid': '<your_app_id>'\n        }\n        data = {\n            'token': token\n        }\n        \n        try:\n            response = requests.post(\n                url, \n                json=data, \n                headers=headers, \n                timeout=self.timeout\n            )\n            \n            response.raise_for_status()\n            return response.json()\n            \n        except requests.exceptions.Timeout:\n            raise Exception(\"Rapido API timeout\")\n        except requests.exceptions.HTTPError as e:\n            self._handle_http_error(e.response)\n        except requests.exceptions.RequestException as e:\n            raise Exception(f\"Network error: {str(e)}\")\n    \n    def _generate_request_id(self) -> str:\n        timestamp = str(int(time.time()))\n        random_part = secrets.token_hex(8)\n        return f\"req_{timestamp}_{random_part}\"\n    \n    def _handle_http_error(self, response):\n        try:\n            error_data = response.json()\n            error_message = error_data.get('error', {}).get('message', 'API request failed')\n        except:\n            error_message = f\"HTTP {response.status_code}: {response.text}\"\n        \n        if response.status_code == 401:\n            raise Exception(\"Unauthorized: Invalid API key or token\")\n        elif response.status_code == 429:\n            raise Exception(\"Rate limit exceeded\")\n        else:\n            raise Exception(error_message)\n\n# Models (Django example)\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    rapido_user_id = models.CharField(max_length=100, unique=True, null=True)\n    mobile = models.CharField(max_length=20, null=True)\n    profile_data = models.JSONField(default=dict)\n    last_login_at = models.DateTimeField(null=True)\n    \n    def save(self, *args, **kwargs):\n        if not self.last_login_at:\n            self.last_login_at = datetime.now()\n        super().save(*args, **kwargs)\n\nclass UserSession(models.Model):\n    session_id = models.CharField(max_length=64, unique=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    expires_at = models.DateTimeField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_accessed_at = models.DateTimeField(auto_now=True)\n    \n    @classmethod\n    def create_session(cls, user, duration_hours=24):\n        session_id = secrets.token_hex(32)\n        expires_at = datetime.now() + timedelta(hours=duration_hours)\n        \n        session = cls.objects.create(\n            session_id=session_id,\n            user=user,\n            expires_at=expires_at\n        )\n        \n        return session\n    \n    @classmethod\n    def validate_session(cls, session_id):\n        try:\n            session = cls.objects.get(\n                session_id=session_id,\n                expires_at__gt=datetime.now()\n            )\n            \n            # Update last accessed time\n            session.last_accessed_at = datetime.now()\n            session.save()\n            \n            return session\n        except cls.DoesNotExist:\n            return None\n\n# Views\n@method_decorator(csrf_exempt, name='dispatch')\nclass RapidoAuthView(View):\n    def __init__(self):\n        super().__init__()\n        self.rapido_client = RapidoAPIClient()\n    \n    def post(self, request):\n        try:\n            data = json.loads(request.body)\n            token = data.get('token')\n            \n            if not token:\n                return JsonResponse({\n                    'success': False,\n                    'error': 'Token is required'\n                }, status=400)\n            \n            # Validate token with Rapido\n            rapido_response = self.rapido_client.validate_token(token)\n            \n            if rapido_response.get('success') and rapido_response.get('data', {}).get('valid'):\n                user_data = rapido_response['data']['user']\n                \n                # Create or update user\n                user = self._create_or_update_user(user_data)\n                \n                # Create session\n                session = UserSession.create_session(user)\n                \n                return JsonResponse({\n                    'success': True,\n                    'sessionId': session.session_id,\n                    'user': {\n                        'id': user.id,\n                        'name': user.get_full_name(),\n                        'email': user.email\n                    },\n                    'expiresAt': session.expires_at.isoformat()\n                })\n            else:\n                return JsonResponse({\n                    'success': False,\n                    'error': 'Token validation failed'\n                }, status=401)\n                \n        except Exception as e:\n            return JsonResponse({\n                'success': False,\n                'error': str(e)\n            }, status=500)\n    \n    def _create_or_update_user(self, user_data):\n        try:\n            user = User.objects.get(rapido_user_id=user_data['id'])\n            # Update existing user\n            user.first_name = user_data.get('profile', {}).get('firstName', '')\n            user.last_name = user_data.get('profile', {}).get('lastName', '')\n            user.email = user_data.get('email', '')\n            user.mobile = user_data.get('mobile', '')\n            user.profile_data = user_data.get('profile', {})\n            user.last_login_at = datetime.now()\n            user.save()\n            \n        except User.DoesNotExist:\n            # Create new user\n            user = User.objects.create(\n                username=user_data['id'],  # Use Rapido ID as username\n                rapido_user_id=user_data['id'],\n                first_name=user_data.get('profile', {}).get('firstName', ''),\n                last_name=user_data.get('profile', {}).get('lastName', ''),\n                email=user_data.get('email', ''),\n                mobile=user_data.get('mobile', ''),\n                profile_data=user_data.get('profile', {}),\n                last_login_at=datetime.now()\n            )\n        \n        return user\n\n@method_decorator(csrf_exempt, name='dispatch')\nclass SessionValidateView(View):\n    def post(self, request):\n        try:\n            data = json.loads(request.body)\n            session_id = data.get('sessionId')\n            \n            if not session_id:\n                return JsonResponse({'valid': False})\n            \n            session = UserSession.validate_session(session_id)\n            \n            if session:\n                return JsonResponse({\n                    'valid': True,\n                    'userId': session.user.id\n                })\n            else:\n                return JsonResponse({'valid': False})\n                \n        except Exception as e:\n            return JsonResponse({'valid': False})\n\n# URL configuration (urls.py)\nfrom django.urls import path\n\nurlpatterns = [\n    path('api/auth/rapido-login', RapidoAuthView.as_view(), name='rapido_login'),\n    path('api/auth/validate-session', SessionValidateView.as_view(), name='validate_session'),\n]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"phplaravel-example",children:"PHP/Laravel Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Services;\n\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\nuse Exception;\n\nclass RapidoAPIService\n{\n    private $apiKey;\n    private $clientId;\n    private $baseUrl;\n    private $timeout;\n\n    public function __construct()\n    {\n        $this->apiKey = config('services.rapido.api_key');\n        $this->clientId = config('services.rapido.client_id');\n        $this->baseUrl = config('services.rapido.base_url');\n        $this->timeout = config('services.rapido.timeout', 10);\n    }\n\n    public function validateToken(string $token): array\n    {\n        $requestId = $this->generateRequestId();\n        \n        try {\n            $response = Http::withHeaders([\n                'authorization' => $this->apiKey,\n                'Content-Type' => 'application/json',\n                'User-Agent' => 'PartnerApp/1.0.0',\n                'x-client-id' => $this->clientId,\n                'x-client-service' => '<your_service_offering>',\n                'x-client-appid' => '<your_app_id>'\n            ])\n            ->timeout($this->timeout)\n            ->post($this->baseUrl . '/fetch-user-details', [\n                'token' => $token\n            ]);\n\n            if ($response->successful()) {\n                return $response->json();\n            } else {\n                $this->handleHttpError($response, $requestId);\n            }\n        } catch (Exception $e) {\n            Log::error(\"Rapido API error ({$requestId}): \" . $e->getMessage());\n            throw new Exception('Failed to validate token with Rapido API');\n        }\n    }\n\n    private function generateRequestId(): string\n    {\n        return 'req_' . time() . '_' . bin2hex(random_bytes(8));\n    }\n\n    private function handleHttpError($response, $requestId)\n    {\n        $status = $response->status();\n        $body = $response->json();\n        \n        Log::error(\"Rapido API HTTP error ({$requestId}): {$status}\", $body);\n        \n        switch ($status) {\n            case 401:\n                throw new Exception('Unauthorized: Invalid API key or token');\n            case 429:\n                throw new Exception('Rate limit exceeded');\n            default:\n                $message = $body['error']['message'] ?? 'API request failed';\n                throw new Exception($message);\n        }\n    }\n}\n\n// Controller\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Services\\RapidoAPIService;\nuse App\\Models\\User;\nuse App\\Models\\UserSession;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Str;\n\nclass RapidoAuthController extends Controller\n{\n    private $rapidoService;\n\n    public function __construct(RapidoAPIService $rapidoService)\n    {\n        $this->rapidoService = $rapidoService;\n    }\n\n    public function login(Request $request): JsonResponse\n    {\n        try {\n            $request->validate([\n                'token' => 'required|string'\n            ]);\n\n            $token = $request->input('token');\n            \n            // Validate token with Rapido\n            $rapidoResponse = $this->rapidoService->validateToken($token);\n            \n            if ($rapidoResponse['success'] && $rapidoResponse['data']['valid']) {\n                $userData = $rapidoResponse['data']['user'];\n                \n                // Create or update user\n                $user = $this->createOrUpdateUser($userData);\n                \n                // Create session\n                $session = UserSession::createSession($user);\n                \n                return response()->json([\n                    'success' => true,\n                    'sessionId' => $session->session_id,\n                    'user' => [\n                        'id' => $user->id,\n                        'name' => $user->name,\n                        'email' => $user->email,\n                    ],\n                    'expiresAt' => $session->expires_at->toISOString(),\n                ]);\n            } else {\n                return response()->json([\n                    'success' => false,\n                    'error' => 'Token validation failed'\n                ], 401);\n            }\n            \n        } catch (Exception $e) {\n            Log::error('Rapido authentication error: ' . $e->getMessage());\n            \n            return response()->json([\n                'success' => false,\n                'error' => 'Authentication failed'\n            ], 500);\n        }\n    }\n\n    public function validateSession(Request $request): JsonResponse\n    {\n        try {\n            $sessionId = $request->input('sessionId');\n            \n            if (!$sessionId) {\n                return response()->json(['valid' => false]);\n            }\n            \n            $session = UserSession::validateSession($sessionId);\n            \n            if ($session) {\n                return response()->json([\n                    'valid' => true,\n                    'userId' => $session->user_id\n                ]);\n            } else {\n                return response()->json(['valid' => false]);\n            }\n            \n        } catch (Exception $e) {\n            Log::error('Session validation error: ' . $e->getMessage());\n            return response()->json(['valid' => false]);\n        }\n    }\n\n    private function createOrUpdateUser(array $userData): User\n    {\n        $user = User::updateOrCreate(\n            ['rapido_user_id' => $userData['id']],\n            [\n                'name' => $userData['name'],\n                'email' => $userData['email'] ?? '',\n                'mobile' => $userData['mobile'] ?? '',\n                'profile_data' => $userData['profile'] ?? [],\n                'last_login_at' => now(),\n            ]\n        );\n\n        return $user;\n    }\n}\n\n// Model\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Str;\nuse Carbon\\Carbon;\n\nclass UserSession extends Model\n{\n    protected $fillable = [\n        'session_id',\n        'user_id',\n        'expires_at',\n    ];\n\n    protected $dates = [\n        'expires_at',\n        'last_accessed_at',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    public static function createSession(User $user, $durationHours = 24)\n    {\n        $sessionId = Str::random(64);\n        $expiresAt = Carbon::now()->addHours($durationHours);\n\n        return self::create([\n            'session_id' => $sessionId,\n            'user_id' => $user->id,\n            'expires_at' => $expiresAt,\n            'last_accessed_at' => Carbon::now(),\n        ]);\n    }\n\n    public static function validateSession($sessionId)\n    {\n        $session = self::where('session_id', $sessionId)\n                      ->where('expires_at', '>', Carbon::now())\n                      ->first();\n\n        if ($session) {\n            $session->update(['last_accessed_at' => Carbon::now()]);\n            return $session;\n        }\n\n        // Clean up expired session\n        self::where('session_id', $sessionId)->delete();\n        \n        return null;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-error-handler-nodejs",children:"Comprehensive Error Handler (Node.js)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class RapidoAPIError extends Error {\n    constructor(message, code, status, details = null) {\n        super(message);\n        this.name = 'RapidoAPIError';\n        this.code = code;\n        this.status = status;\n        this.details = details;\n    }\n}\n\nclass ErrorHandler {\n    static handleRapidoAPIError(error) {\n        if (error.response) {\n            const { status, data } = error.response;\n            const errorCode = data.error?.code || 'UNKNOWN_ERROR';\n            const errorMessage = data.error?.message || 'API request failed';\n            const errorDetails = data.error?.details || null;\n            \n            throw new RapidoAPIError(errorMessage, errorCode, status, errorDetails);\n        } else if (error.request) {\n            throw new RapidoAPIError(\n                'Network error: Unable to reach Rapido API',\n                'NETWORK_ERROR',\n                0\n            );\n        } else {\n            throw new RapidoAPIError(\n                error.message || 'Unknown error occurred',\n                'UNKNOWN_ERROR',\n                0\n            );\n        }\n    }\n    \n    static sendErrorResponse(res, error) {\n        let status = 500;\n        let errorResponse = {\n            success: false,\n            error: 'Internal server error'\n        };\n        \n        if (error instanceof RapidoAPIError) {\n            switch (error.code) {\n                case 'INVALID_TOKEN':\n                    status = 401;\n                    errorResponse.error = 'Invalid or expired token';\n                    break;\n                case 'UNAUTHORIZED':\n                    status = 401;\n                    errorResponse.error = 'Authentication failed';\n                    break;\n                case 'RATE_LIMITED':\n                    status = 429;\n                    errorResponse.error = 'Rate limit exceeded. Please try again later.';\n                    break;\n                case 'NETWORK_ERROR':\n                    status = 503;\n                    errorResponse.error = 'Authentication service temporarily unavailable';\n                    break;\n                default:\n                    status = error.status || 500;\n                    errorResponse.error = error.message;\n            }\n        }\n        \n        res.status(status).json(errorResponse);\n    }\n}\n\n// Usage in routes\napp.post('/api/auth/rapido-login', async (req, res) => {\n    try {\n        // ... authentication logic\n    } catch (error) {\n        console.error('Authentication error:', error);\n        ErrorHandler.sendErrorResponse(res, error);\n    }\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-examples",children:"Testing Examples"}),"\n",(0,t.jsx)(n.h3,{id:"unit-tests-jest",children:"Unit Tests (Jest)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const RapidoAPIClient = require('../src/services/RapidoAPIClient');\nconst axios = require('axios');\n\njest.mock('axios');\nconst mockedAxios = axios;\n\ndescribe('RapidoAPIClient', () => {\n    let client;\n    \n    beforeEach(() => {\n        client = new RapidoAPIClient({\n            apiKey: 'test-api-key',\n            clientId: 'test-client-id',\n            baseURL: 'https://test-api.rapido.bike/partner'\n        });\n    });\n    \n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n    \n    describe('validateToken', () => {\n        it('should successfully validate a valid token', async () => {\n            const mockResponse = {\n                data: {\n                    success: true,\n                    data: {\n                        valid: true,\n                        user: {\n                            id: 'user_123',\n                            name: 'John Doe',\n                            email: 'john@example.com'\n                        }\n                    }\n                }\n            };\n            \n            mockedAxios.post.mockResolvedValue(mockResponse);\n            \n            const result = await client.validateToken('valid-token');\n            \n            expect(result.success).toBe(true);\n            expect(result.data.valid).toBe(true);\n            expect(result.data.user.id).toBe('user_123');\n            \n            expect(mockedAxios.post).toHaveBeenCalledWith(\n                '/fetch-user-details',\n                {\n                    token: 'valid-token'\n                },\n                expect.objectContaining({\n                    headers: expect.objectContaining({\n                        'x-client-id': 'test_client_id'\n                    })\n                })\n            );\n        });\n        \n        it('should handle invalid token error', async () => {\n            const mockError = {\n                response: {\n                    status: 401,\n                    data: {\n                        success: false,\n                        error: {\n                            code: 'INVALID_TOKEN',\n                            message: 'Token is invalid or expired'\n                        }\n                    }\n                }\n            };\n            \n            mockedAxios.post.mockRejectedValue(mockError);\n            \n            await expect(client.validateToken('invalid-token'))\n                .rejects\n                .toThrow('Token is invalid or expired');\n        });\n        \n        it('should handle network errors', async () => {\n            const mockError = {\n                request: {}\n            };\n            \n            mockedAxios.post.mockRejectedValue(mockError);\n            \n            await expect(client.validateToken('some-token'))\n                .rejects\n                .toThrow('Network error: Unable to reach Rapido API');\n        });\n    });\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Related Documentation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ota-docs/docs/api/overview",children:"API Overview"})," - Complete API documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ota-docs/docs/api/token-validation",children:"Token Validation API"})," - Detailed endpoint specifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ota-docs/docs/integration/basics",children:"Integration Basics"})," - Frontend integration guide"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);