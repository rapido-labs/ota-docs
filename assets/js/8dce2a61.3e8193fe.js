"use strict";(self.webpackChunkintegration_docs=self.webpackChunkintegration_docs||[]).push([[643],{6916:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"integration/events-tracking","title":"Events Tracking","description":"Rapido provides two complementary event tracking mechanisms to give you complete visibility into user interactions and business events across your PWA integration.","source":"@site/docs/integration/events-tracking.md","sourceDirName":"integration","slug":"/integration/events-tracking","permalink":"/ota-docs/docs/integration/events-tracking","draft":false,"unlisted":false,"editUrl":"https://github.com/rapido-labs/ota-docs/tree/main/docs/docs/integration/events-tracking.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Events Tracking","sidebar_label":"Events Tracking","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Bridge","permalink":"/ota-docs/docs/integration/javascript-bridge"},"next":{"title":"Overview","permalink":"/ota-docs/docs/api/overview"}}');var s=t(4848),r=t(8453);const o={title:"Events Tracking",sidebar_label:"Events Tracking",sidebar_position:3},a="Events Tracking Integration",l={},d=[{value:"Overview",id:"overview",level:2},{value:"PWA to Native Events",id:"pwa-to-native-events",level:2},{value:"Purpose",id:"purpose",level:3},{value:"When to Use",id:"when-to-use",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Method: <code>logEvents(eventType, propertiesJson)</code>",id:"method-logeventseventtype-propertiesjson",level:4},{value:"Event Types and Examples",id:"event-types-and-examples",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Best Practices",id:"best-practices",level:4},{value:"Server to Server Events",id:"server-to-server-events",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"When to Use",id:"when-to-use-1",level:3},{value:"API Endpoint",id:"api-endpoint",level:3},{value:"Authentication &amp; Headers",id:"authentication--headers",level:3},{value:"Request Schema",id:"request-schema",level:3},{value:"Base Event Structure",id:"base-event-structure",level:4},{value:"Flight Booking Events",id:"flight-booking-events",level:4},{value:"Hotel Booking Events",id:"hotel-booking-events",level:4},{value:"Event Types",id:"event-types",level:3},{value:"Implementation Examples",id:"implementation-examples",level:3},{value:"Node.js Implementation",id:"nodejs-implementation",level:4},{value:"Python Implementation",id:"python-implementation",level:4},{value:"Response Handling",id:"response-handling",level:3},{value:"Success Response (HTTP 200)",id:"success-response-http-200",level:4},{value:"Error Responses",id:"error-responses",level:4},{value:"Error Response Format",id:"error-response-format",level:4},{value:"Best Practices",id:"best-practices-1",level:3},{value:"Event Design",id:"event-design",level:4},{value:"Error Handling &amp; Reliability",id:"error-handling--reliability",level:4},{value:"Security &amp; Performance",id:"security--performance",level:4},{value:"Complete Integration Example",id:"complete-integration-example",level:2},{value:"Coordinated Event Tracking",id:"coordinated-event-tracking",level:3}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"events-tracking-integration",children:"Events Tracking Integration"})}),"\n",(0,s.jsx)(n.p,{children:"Rapido provides two complementary event tracking mechanisms to give you complete visibility into user interactions and business events across your PWA integration."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Event Flow"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Use Case"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Triggered By"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Data Flow"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"PWA to Native"})}),(0,s.jsx)(n.td,{children:"Real-time user interactions, analytics"}),(0,s.jsx)(n.td,{children:"User actions in PWA"}),(0,s.jsx)(n.td,{children:"PWA \u2192 Rapido App \u2192 Analytics"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Server to Server"})}),(0,s.jsx)(n.td,{children:"Business events, order lifecycle"}),(0,s.jsx)(n.td,{children:"Backend business logic"}),(0,s.jsx)(n.td,{children:"Partner Server \u2192 Rapido Server"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Both flows work together to provide comprehensive event tracking for your integration."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"pwa-to-native-events",children:"PWA to Native Events"}),"\n",(0,s.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Track real-time user interactions, page views, and custom analytics events directly from your PWA to the Rapido mobile app."}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"User interaction tracking (clicks, form submissions)"}),"\n",(0,s.jsx)(n.li,{children:"Page view analytics"}),"\n",(0,s.jsx)(n.li,{children:"Feature usage metrics"}),"\n",(0,s.jsx)(n.li,{children:"Real-time user behavior analysis"}),"\n",(0,s.jsx)(n.li,{children:"Custom analytics events"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(n.h4,{id:"method-logeventseventtype-propertiesjson",children:["Method: ",(0,s.jsx)(n.code,{children:"logEvents(eventType, propertiesJson)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Track user action\nfunction trackUserAction(actionName, additionalData = {}) {\n    const properties = {\n        action_name: actionName,\n        timestamp: new Date().toISOString(),\n        page_url: window.location.href,\n        user_agent: navigator.userAgent,\n        ...additionalData\n    };\n    \n    if (window.NativeJSBridge && window.NativeJSBridge.logEvents) {\n        window.NativeJSBridge.logEvents('user_action', JSON.stringify(properties));\n    }\n}\n\n// Track page view\nfunction trackPageView() {\n    const properties = {\n        page_name: document.title,\n        page_url: window.location.href,\n        referrer: document.referrer,\n        timestamp: new Date().toISOString(),\n        viewport_width: window.innerWidth,\n        viewport_height: window.innerHeight\n    };\n    \n    window.NativeJSBridge.logEvents('page_view', JSON.stringify(properties));\n}\n\n// Track business event\nfunction trackBusinessEvent(eventType, businessData) {\n    const properties = {\n        event_type: eventType,\n        timestamp: new Date().toISOString(),\n        session_id: getCurrentSessionId(),\n        ...businessData\n    };\n    \n    window.NativeJSBridge.logEvents('business_event', JSON.stringify(properties));\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"event-types-and-examples",children:"Event Types and Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// User engagement events\ntrackUserAction('search_performed', {\n    search_query: 'flights to bangalore',\n    results_count: 45,\n    search_filters: ['economy', 'direct_flights']\n});\n\n// Conversion events\ntrackBusinessEvent('booking_initiated', {\n    service_type: 'flight',\n    origin: 'DEL',\n    destination: 'BLR',\n    departure_date: '2024-02-15',\n    estimated_price: 5500\n});\n\n// Feature usage\ntrackUserAction('filter_applied', {\n    filter_type: 'price_range',\n    min_price: 2000,\n    max_price: 8000\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function safeLogEvent(eventType, properties) {\n    try {\n        if (!window.NativeJSBridge) {\n            console.warn('Running outside Rapido app - event not logged');\n            return false;\n        }\n        \n        if (typeof window.NativeJSBridge.logEvents !== 'function') {\n            console.error('logEvents method not available');\n            return false;\n        }\n        \n        if (!eventType || typeof eventType !== 'string') {\n            throw new Error('eventType must be a non-empty string');\n        }\n        \n        const propertiesJson = JSON.stringify(properties || {});\n        window.NativeJSBridge.logEvents(eventType, propertiesJson);\n        \n        return true;\n        \n    } catch (error) {\n        console.error('Failed to log event:', error);\n        // Optional: Store for later retry\n        storeEventForLater(eventType, properties);\n        return false;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Naming"}),": Use consistent naming conventions (e.g., snake_case)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Property Structure"}),": Keep properties flat and avoid deeply nested objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Size"}),": Limit property objects to avoid large JSON strings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Always wrap in try-catch and provide fallbacks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timestamp"}),": Include timestamps for accurate event sequencing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Context"}),": Add session and user context when available"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"server-to-server-events",children:"Server to Server Events"}),"\n",(0,s.jsx)(n.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Track business-critical events, order lifecycle, and backend business logic events from your server to Rapido's analytics and business intelligence systems."}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-1",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Order confirmations and status updates"}),"\n",(0,s.jsx)(n.li,{children:"Payment processing events"}),"\n",(0,s.jsx)(n.li,{children:"Booking lifecycle tracking"}),"\n",(0,s.jsx)(n.li,{children:"Business KPI events"}),"\n",(0,s.jsx)(n.li,{children:"Integration health monitoring"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"api-endpoint",children:"API Endpoint"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Method"}),": ",(0,s.jsx)(n.code,{children:"POST"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"URL"}),": ",(0,s.jsx)(n.code,{children:"https://<rapido-host-url>/api/ota/event"})]}),"\n",(0,s.jsx)(n.h3,{id:"authentication--headers",children:"Authentication & Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"POST /api/ota/event HTTP/1.1\nHost: <rapido-host-url>\nContent-Type: application/json\nx-client-id: your-client-id\nx-client-service: flights/hotels\nx-client-app-id: your-app-id\nauthorization: your-client-key\n"})}),"\n",(0,s.jsx)(n.h3,{id:"request-schema",children:"Request Schema"}),"\n",(0,s.jsx)(n.h4,{id:"base-event-structure",children:"Base Event Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "user_id_from_rapido",\n  "event": {\n    "type": "order.confirmed",\n    "id": "evt_unique_event_id"\n  },\n  "attributes": {\n    // Service-specific attributes\n  },\n  "schemaVersion": 1\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"flight-booking-events",children:"Flight Booking Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "rapido_user_12345",\n  "event": {\n    "type": "order.confirmed",\n    "id": "evt_flight_confirm_789"\n  },\n  "attributes": {\n    "orderId": "FL_BOOKING_ABC123",\n    "orderStatus": "CONFIRMED",\n    "amount_total": 8500,\n    "location_origin_lat": 28.5562,\n    "location_origin_long": 77.1000,\n    "location_dest_lat": 12.9716,\n    "location_dest_long": 77.5946,\n    "start_time": 1708156800,\n    "end_time": 1708163000,\n    "hostStatus": "CONFIRMED",\n    "tz": "Asia/Kolkata"\n  },\n  "schemaVersion": 1\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"hotel-booking-events",children:"Hotel Booking Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "rapido_user_12345",\n  "event": {\n    "type": "order.confirmed",\n    "id": "evt_hotel_confirm_456"\n  },\n  "attributes": {\n    "orderId": "HTL_BOOKING_XYZ789",\n    "orderStatus": "CONFIRMED",\n    "amount_total": 12000,\n    "location_origin_lat": 28.6139,\n    "location_origin_long": 77.2090,\n    "location_dest_lat": 28.6139,\n    "location_dest_long": 77.2090,\n    "start_time": 1708156800,\n    "end_time": 1708415200,\n    "hostStatus": "CONFIRMED",\n    "tz": "Asia/Kolkata"\n  },\n  "schemaVersion": 1\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"event-types",children:"Event Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Event Type"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"When to Send"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"order.confirmed"})}),(0,s.jsx)(n.td,{children:"Order successfully confirmed"}),(0,s.jsx)(n.td,{children:"After successful booking/reservation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"order.cancelled"})}),(0,s.jsx)(n.td,{children:"Order cancelled by user/system"}),(0,s.jsx)(n.td,{children:"When booking is cancelled"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"order.modified"})}),(0,s.jsx)(n.td,{children:"Order details changed"}),(0,s.jsx)(n.td,{children:"When booking is modified"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"payment.completed"})}),(0,s.jsx)(n.td,{children:"Payment successfully processed"}),(0,s.jsx)(n.td,{children:"After payment confirmation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"payment.failed"})}),(0,s.jsx)(n.td,{children:"Payment processing failed"}),(0,s.jsx)(n.td,{children:"When payment fails"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,s.jsx)(n.h4,{id:"nodejs-implementation",children:"Node.js Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const axios = require('axios');\n\nclass RapidoEventClient {\n    constructor(clientId, clientKey, serviceType, appId) {\n        this.config = {\n            clientId,\n            clientKey,\n            serviceType,\n            appId,\n            baseURL: '<rapido-host-url>'\n        };\n    }\n\n    async postEvent(userId, eventType, eventId, attributes) {\n        try {\n            const eventData = {\n                userId: userId,\n                event: {\n                    type: eventType,\n                    id: eventId\n                },\n                attributes: attributes,\n                schemaVersion: 1\n            };\n\n            const response = await axios.post(\n                `${this.config.baseURL}/api/ota/event`,\n                eventData,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-client-id': this.config.clientId,\n                        'x-client-service': this.config.serviceType,\n                        'x-client-app-id': this.config.appId,\n                        'authorization': this.config.clientKey\n                    }\n                }\n            );\n\n            if (response.data.success) {\n                console.log('Event posted successfully:', response.data.requestId);\n                return response.data;\n            } else {\n                throw new Error(`Event posting failed: ${response.data.error?.message}`);\n            }\n\n        } catch (error) {\n            console.error('Failed to post event to Rapido:', error);\n            throw error;\n        }\n    }\n\n    // Helper method for flight bookings\n    async postFlightBookingEvent(userId, orderId, orderStatus, bookingDetails) {\n        const eventId = `evt_flight_${orderId}_${Date.now()}`;\n        const attributes = {\n            orderId: orderId,\n            orderStatus: orderStatus,\n            amount_total: bookingDetails.totalAmount,\n            location_origin_lat: bookingDetails.origin.lat,\n            location_origin_long: bookingDetails.origin.lng,\n            location_dest_lat: bookingDetails.destination.lat,\n            location_dest_long: bookingDetails.destination.lng,\n            start_time: bookingDetails.departureTime,\n            end_time: bookingDetails.arrivalTime,\n            hostStatus: orderStatus === 'CONFIRMED' ? 'CONFIRMED' : 'CANCELLED',\n            tz: bookingDetails.timezone || 'Asia/Kolkata'\n        };\n\n        return await this.postEvent(userId, 'order.confirmed', eventId, attributes);\n    }\n\n    // Helper method for hotel bookings\n    async postHotelBookingEvent(userId, orderId, orderStatus, bookingDetails) {\n        const eventId = `evt_hotel_${orderId}_${Date.now()}`;\n        const attributes = {\n            orderId: orderId,\n            orderStatus: orderStatus,\n            amount_total: bookingDetails.totalAmount,\n            location_origin_lat: bookingDetails.hotel.lat,\n            location_origin_long: bookingDetails.hotel.lng,\n            location_dest_lat: bookingDetails.hotel.lat,\n            location_dest_long: bookingDetails.hotel.lng,\n            start_time: bookingDetails.checkInTime,\n            end_time: bookingDetails.checkOutTime,\n            hostStatus: orderStatus === 'CONFIRMED' ? 'CONFIRMED' : 'CANCELLED',\n            tz: bookingDetails.timezone || 'Asia/Kolkata'\n        };\n\n        return await this.postEvent(userId, 'order.confirmed', eventId, attributes);\n    }\n}\n\n// Usage example\nconst rapidoEvents = new RapidoEventClient(\n    'your-client-id',\n    'your-client-key', \n    'flights',\n    'your-app-id'\n);\n\n// Post flight booking confirmation\nasync function handleFlightBookingConfirmation(booking) {\n    try {\n        await rapidoEvents.postFlightBookingEvent(\n            booking.rapidoUserId,\n            booking.id,\n            'CONFIRMED',\n            {\n                totalAmount: booking.totalPrice,\n                origin: booking.originAirport.location,\n                destination: booking.destinationAirport.location,\n                departureTime: booking.departureTimestamp,\n                arrivalTime: booking.arrivalTimestamp,\n                timezone: booking.timezone\n            }\n        );\n\n        console.log('Flight booking event sent to Rapido successfully');\n    } catch (error) {\n        console.error('Failed to notify Rapido of booking confirmation:', error);\n        // Handle error appropriately (retry, alert, etc.)\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"python-implementation",children:"Python Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import requests\nimport json\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\n\nclass RapidoEventClient:\n    def __init__(self, client_id: str, client_key: str, service_type: str, app_id: str):\n        self.config = {\n            'client_id': client_id,\n            'client_key': client_key,\n            'service_type': service_type,\n            'app_id': app_id,\n            'baseURL: '<rapido-host-url>'\n        }\n    \n    def post_event(self, user_id: str, event_type: str, event_id: str, attributes: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Post an event to Rapido's event API\"\"\"\n        \n        event_data = {\n            'userId': user_id,\n            'event': {\n                'type': event_type,\n                'id': event_id\n            },\n            'attributes': attributes,\n            'schemaVersion': 1\n        }\n        \n        headers = {\n            'Content-Type': 'application/json',\n            'x-client-id': self.config['client_id'],\n            'x-client-service': self.config['service_type'],\n            'x-client-app-id': self.config['app_id'],\n            'authorization': self.config['client_key']\n        }\n        \n        try:\n            response = requests.post(\n                f\"{self.config['base_url']}/api/ota/event\",\n                json=event_data,\n                headers=headers,\n                timeout=30\n            )\n            \n            response.raise_for_status()\n            return response.json()\n            \n        except requests.exceptions.RequestException as e:\n            print(f\"Failed to post event to Rapido: {e}\")\n            raise\n    \n    def post_booking_event(self, user_id: str, order_id: str, order_status: str, \n                          service_type: str, booking_details: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Post a booking event (works for both flights and hotels)\"\"\"\n        \n        event_id = f\"evt_{service_type}_{order_id}_{int(datetime.now().timestamp())}\"\n        \n        attributes = {\n            'orderId': order_id,\n            'orderStatus': order_status,\n            'amount_total': booking_details['total_amount'],\n            'location_origin_lat': booking_details['origin_lat'],\n            'location_origin_long': booking_details['origin_lng'],\n            'location_dest_lat': booking_details['dest_lat'],\n            'location_dest_long': booking_details['dest_lng'],\n            'start_time': booking_details['start_time'],\n            'end_time': booking_details['end_time'],\n            'hostStatus': 'CONFIRMED' if order_status == 'CONFIRMED' else 'CANCELLED',\n            'tz': booking_details.get('timezone', 'Asia/Kolkata')\n        }\n        \n        return self.post_event(user_id, 'order.confirmed', event_id, attributes)\n\n# Usage example\nrapido_client = RapidoEventClient(\n    client_id='your-client-id',\n    client_key='your-client-key',\n    service_type='flights',\n    app_id='your-app-id'\n)\n\ndef handle_booking_confirmation(booking_data):\n    try:\n        result = rapido_client.post_booking_event(\n            user_id=booking_data['rapido_user_id'],\n            order_id=booking_data['booking_id'],\n            order_status='CONFIRMED',\n            service_type='flight',\n            booking_details={\n                'total_amount': booking_data['total_price'],\n                'origin_lat': booking_data['origin']['latitude'],\n                'origin_lng': booking_data['origin']['longitude'],\n                'dest_lat': booking_data['destination']['latitude'],\n                'dest_lng': booking_data['destination']['longitude'],\n                'start_time': booking_data['departure_timestamp'],\n                'end_time': booking_data['arrival_timestamp'],\n                'timezone': booking_data.get('timezone', 'Asia/Kolkata')\n            }\n        )\n        \n        if result.get('success'):\n            print(f\"Event posted successfully: {result['requestId']}\")\n        else:\n            print(f\"Event posting failed: {result.get('error', {}).get('message')}\")\n            \n    except Exception as e:\n        print(f\"Failed to post booking event: {e}\")\n        # Handle error appropriately\n"})}),"\n",(0,s.jsx)(n.h3,{id:"response-handling",children:"Response Handling"}),"\n",(0,s.jsx)(n.h4,{id:"success-response-http-200",children:"Success Response (HTTP 200)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "code": 7000,\n  "timestamp": "2024-01-15T10:30:00Z",\n  "requestId": "req_123456789"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"HTTP Status"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Action Required"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"400"}),(0,s.jsx)(n.td,{children:"Bad Request - Invalid data format"}),(0,s.jsx)(n.td,{children:"Fix request payload"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"401"}),(0,s.jsx)(n.td,{children:"Unauthorized - Invalid credentials"}),(0,s.jsx)(n.td,{children:"Check API keys"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"429"}),(0,s.jsx)(n.td,{children:"Too Many Requests - Rate limited"}),(0,s.jsx)(n.td,{children:"Implement exponential backoff"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"499"}),(0,s.jsx)(n.td,{children:"Client Closed Request - Request timeout"}),(0,s.jsx)(n.td,{children:"Retry with proper timeout"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"500"}),(0,s.jsx)(n.td,{children:"Internal Server Error"}),(0,s.jsx)(n.td,{children:"Retry after delay"})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "success": false,\n  "code": 7001,\n  "error": {\n    "message": "Human-readable error description",\n    "details": {\n      "field": "Additional context if applicable"\n    }\n  },\n  "timestamp": "2024-01-15T10:30:00Z",\n  "requestId": "req_123456789"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,s.jsx)(n.h4,{id:"event-design",children:"Event Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unique Event IDs"}),": Generate unique event IDs to prevent duplicates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistent Timestamps"}),": Use Unix timestamps for time fields"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required Fields"}),": Always include all mandatory attributes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Naming"}),": Use clear, consistent event type naming"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"error-handling--reliability",children:"Error Handling & Reliability"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retry Logic"}),": Implement exponential backoff for transient failures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Queue Events"}),": Queue events locally for reliability during outages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring"}),": Log and monitor event posting success rates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Idempotency"}),": Design events to be safely retryable"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"security--performance",children:"Security & Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Key Security"}),": Store API keys securely, rotate regularly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Respect rate limits, implement client-side throttling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload Size"}),": Keep event payloads under recommended limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Processing"}),": Consider batching for high-volume scenarios"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"complete-integration-example",children:"Complete Integration Example"}),"\n",(0,s.jsx)(n.h3,{id:"coordinated-event-tracking",children:"Coordinated Event Tracking"}),"\n",(0,s.jsx)(n.p,{children:"Here's how both event flows work together in a complete booking flow:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Frontend PWA - Track user interactions\nclass BookingEventTracker {\n    constructor() {\n        this.sessionId = this.getSessionId();\n        this.rapidoEventClient = new RapidoServerEventClient();\n    }\n\n    // PWA to Native events\n    trackSearchInitiated(searchParams) {\n        safeLogEvent('search_initiated', {\n            service_type: searchParams.service,\n            origin: searchParams.origin,\n            destination: searchParams.destination,\n            departure_date: searchParams.departureDate,\n            return_date: searchParams.returnDate,\n            passengers: searchParams.passengers,\n            session_id: this.sessionId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    trackResultsViewed(resultsData) {\n        safeLogEvent('results_viewed', {\n            service_type: resultsData.service,\n            results_count: resultsData.totalResults,\n            filters_applied: resultsData.appliedFilters,\n            sort_order: resultsData.sortOrder,\n            session_id: this.sessionId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    trackBookingInitiated(bookingData) {\n        safeLogEvent('booking_initiated', {\n            service_type: bookingData.service,\n            selected_option_id: bookingData.optionId,\n            estimated_price: bookingData.price,\n            session_id: this.sessionId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    // Coordinate with backend events\n    async handleBookingConfirmation(bookingResult) {\n        // Track frontend completion\n        safeLogEvent('booking_completed', {\n            booking_id: bookingResult.bookingId,\n            final_price: bookingResult.totalAmount,\n            payment_method: bookingResult.paymentMethod,\n            session_id: this.sessionId,\n            timestamp: new Date().toISOString()\n        });\n\n        // Trigger server-to-server event\n        try {\n            await this.rapidoEventClient.postBookingConfirmation(bookingResult);\n        } catch (error) {\n            console.error('Failed to post server event:', error);\n            // Log failure for monitoring\n            safeLogEvent('server_event_failed', {\n                booking_id: bookingResult.bookingId,\n                error_message: error.message,\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n}\n\n// Backend - Server to Server events\nclass RapidoServerEventClient {\n    constructor() {\n        this.client = new RapidoEventClient(\n            process.env.RAPIDO_CLIENT_ID,\n            process.env.RAPIDO_CLIENT_KEY,\n            process.env.SERVICE_TYPE,\n            process.env.APP_ID\n        );\n    }\n\n    async postBookingConfirmation(bookingData) {\n        const eventDetails = this.prepareBookingEventData(bookingData);\n        \n        return await this.client.postFlightBookingEvent(\n            bookingData.rapidoUserId,\n            bookingData.bookingId,\n            'CONFIRMED',\n            eventDetails\n        );\n    }\n\n    prepareBookingEventData(booking) {\n        return {\n            totalAmount: booking.totalAmount,\n            origin: {\n                lat: booking.origin.latitude,\n                lng: booking.origin.longitude\n            },\n            destination: {\n                lat: booking.destination.latitude, \n                lng: booking.destination.longitude\n            },\n            departureTime: booking.departureTimestamp,\n            arrivalTime: booking.arrivalTimestamp,\n            timezone: booking.timezone || 'Asia/Kolkata'\n        };\n    }\n}\n\n// Usage in booking flow\nconst eventTracker = new BookingEventTracker();\n\n// User searches for flights\neventTracker.trackSearchInitiated({\n    service: 'flight',\n    origin: 'DEL',\n    destination: 'BLR',\n    departureDate: '2024-02-15',\n    passengers: 2\n});\n\n// User views results\neventTracker.trackResultsViewed({\n    service: 'flight',\n    totalResults: 45,\n    appliedFilters: ['economy', 'morning'],\n    sortOrder: 'price_low_high'\n});\n\n// User initiates booking\neventTracker.trackBookingInitiated({\n    service: 'flight',\n    optionId: 'flight_123',\n    price: 8500\n});\n\n// Booking confirmed - coordinate both event types\neventTracker.handleBookingConfirmation({\n    bookingId: 'FL_BOOKING_ABC123',\n    rapidoUserId: 'rapido_user_12345',\n    totalAmount: 8500,\n    paymentMethod: 'credit_card',\n    origin: { latitude: 28.5562, longitude: 77.1000 },\n    destination: { latitude: 12.9716, longitude: 77.5946 },\n    departureTimestamp: 1708156800,\n    arrivalTimestamp: 1708163000,\n    timezone: 'Asia/Kolkata'\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This coordinated approach ensures:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complete User Journey Tracking"}),": PWA events capture user interactions and decision-making"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Business Event Reliability"}),": Server events ensure critical business events are recorded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Consistency"}),": Both flows share common identifiers (session IDs, booking IDs)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Failure Resilience"}),": Frontend events continue even if server events fail"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Review ",(0,s.jsx)(n.a,{href:"/ota-docs/docs/integration/javascript-bridge",children:"JavaScript Bridge"})," for detailed PWA event implementation"]}),"\n",(0,s.jsxs)(n.li,{children:["Check ",(0,s.jsx)(n.a,{href:"/ota-docs/docs/api/examples",children:"API Examples"})," for server-side integration examples"]}),"\n",(0,s.jsxs)(n.li,{children:["See ",(0,s.jsx)(n.a,{href:"/ota-docs/docs/security",children:"Security Guidelines"})," for event data protection requirements"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);